import 'dart:convert';

import 'package:csc_picker/csc_picker.dart';
import 'package:east_bridge/Global.dart';
import 'package:east_bridge/KYC/KYC%20Components/DatePicker.dart';
import 'package:east_bridge/KYC/KYC%20Components/GloablIndividual.dart';
import 'package:east_bridge/KYC/KYC%20Components/HijriDatePicker.dart';
import 'package:east_bridge/generated/l10n.dart';
import 'package:east_bridge/utility/Colors.dart';
import 'package:flutter/material.dart';
import 'package:east_bridge/utility/TextController.dart';
import 'package:flutter_html/flutter_html.dart';
import 'package:flutter_typeahead/flutter_typeahead.dart';
import 'package:fluttertoast/fluttertoast.dart';
import 'package:hijri_picker/hijri_picker.dart';
import 'package:http/http.dart' as http;
import 'package:hijri/hijri_calendar.dart';
import 'package:intl/intl.dart';
import 'package:pinput/pinput.dart';
import 'package:flutter/services.dart';

enum SingingCharacter { yes, no }

class FATCA extends StatefulWidget {
  FATCA({super.key, controller}) {
    tabController = controller;
  }

  @override
  State<FATCA> createState() => _FATCAState();
  static ValueNotifier<int> id = ValueNotifier(0);
  static ValueNotifier<String> firstNAme = ValueNotifier("");
  static ValueNotifier<String> fatherName = ValueNotifier("");
  static ValueNotifier<String> grandFatherName = ValueNotifier("");
  static ValueNotifier<String> familyName = ValueNotifier("");
  static ValueNotifier<String> firstNameArabic = ValueNotifier("");
  static ValueNotifier<String> fatherNameArabic = ValueNotifier("");
  static ValueNotifier<String> grandFatherNameArabic = ValueNotifier("");
  static ValueNotifier<String> familyNameArabic = ValueNotifier("");
  static ValueNotifier<String> placeOfBirth = ValueNotifier("");
  static ValueNotifier<String> dob = ValueNotifier("");
  static ValueNotifier<String> dobHijri = ValueNotifier("");

  static ValueNotifier<String> country = ValueNotifier("");
  static ValueNotifier<String> city = ValueNotifier("");
  static ValueNotifier<String> state = ValueNotifier("");
  static ValueNotifier<String> district = ValueNotifier("");
  static ValueNotifier<String> buildingNum = ValueNotifier("");
  static ValueNotifier<String> streetNAme = ValueNotifier("");
  static ValueNotifier<String> postalCode = ValueNotifier("");

  static ValueNotifier<String> clientName = ValueNotifier("");
  static ValueNotifier<String> clientNameAr = ValueNotifier("");
}

TabController? tabController;

class _FATCAState extends State<FATCA> {
  String btn = "Next";
  final _formKey = GlobalKey<FormState>();
  bool? isChecked = false;
  bool ifnotin1Error = false;
  bool ifnotin2Error = false;
  bool ifnotin3Error = false;

  TextEditingController countryJr1 = new TextEditingController();
  TextEditingController countryJr2 = new TextEditingController();
  TextEditingController countryJr3 = new TextEditingController();
  TextEditingController tin1 = new TextEditingController();
  TextEditingController tin2 = new TextEditingController();
  TextEditingController tin3 = new TextEditingController();
  TextEditingController notin1 = new TextEditingController();
  TextEditingController notin2 = new TextEditingController();
  TextEditingController notin3 = new TextEditingController();
  TextEditingController ssn = new TextEditingController();
  TextEditingController itin = new TextEditingController();
  TextEditingController name = new TextEditingController();
  TextEditingController nameAr = new TextEditingController();
  TextEditingController date = new TextEditingController();
  TextEditingController dateHijri = new TextEditingController();
  TextEditingController DOBdateController = new TextEditingController();
  TextEditingController DOBHijridateController = new TextEditingController();
  TextEditingController placeOfBirth = new TextEditingController();
  TextEditingController _typeAheadController = new TextEditingController();
  TextEditingController _typeAheadController2 = new TextEditingController();
  TextEditingController _typeAheadController3 = new TextEditingController();
  TextEditingController _typeAheadController4 = new TextEditingController();
  TextEditingController _typeAheadController5 = new TextEditingController();
  TextEditingController _typeAheadController6 = new TextEditingController();
  TextEditingController _typeAheadController7 = new TextEditingController();
  TextEditingController _typeAheadController8 = new TextEditingController();
  TextEditingController _typeAheadController9 = new TextEditingController();
  TextEditingController capacitySpecify = new TextEditingController();
  TextEditingController building = new TextEditingController();
  TextEditingController street = new TextEditingController();
  TextEditingController district = new TextEditingController();
  TextEditingController city = new TextEditingController();
  TextEditingController postal = new TextEditingController();
  TextEditingController country = new TextEditingController();

  String? titledrop;
  String _selectedItem = '';
  String _selectedItem2 = ''; // To store the selected item
// To store the selected item
  String _selectedItem3 = ''; // To store the selected item

  var selectedDate = HijriCalendar.now();

  SingingCharacter? _character = SingingCharacter.yes;
  String selectedValue = "";
  String selectedValue2 = "";
  String selectedValue3 = "";
  String selectedValue4 = "";
  String sectionC = "";
  String? dropdownvalue;
  String ifnotin1 = "";
  String ifnotin2 = "";
  String ifnotin3 = "";

  String sectionAque = "";

  var title = ['Mr.', 'Miss.', 'Mrs.', 'Other'];
  // FATCA({controller}) {
  //   tabController = controller;
  // }

  // ignore: non_constant_identifier_names
  //FATCA({firstName, familyName}) {}

  bool capacityError = false;
  bool declareError = false;
  bool tableError = false;
  bool radioError = false;
  bool nameError = false;
  bool dateError = false;
  bool nameArError = false;
  bool radio1error = false;
  bool radio2error = false;

  @override
  void initState() {
    super.initState();
    name.text = FATCA.clientName.value;
    // getdata(10);
    print("Init Runnng");
    if (GlobalIndividual.individualdraftprogress["FatcaAndCrsIndividual"] ==
        true) {
      print("ftechinggg----------");
      getdata(GlobalIndividual.individualclientid);
    }
  }

  Future getdata(int clientId) async {
    print("getting");
    var url = Uri.parse(
        '${GlobalPermission.urlLink}/api/FatcaAndCrsIndividual/${clientId}');

    var headers = {
      'Content-Type': 'application/json',
    };
    var response = await http.get(url, headers: headers);

    if (response.statusCode == 200) {
      var data = jsonDecode(response.body);
      print(data);
      // await Future.delayed(Duration(seconds: 2));

      setState(() {
        sectionAque = data["accountHolderInformation"];

        selectedValue = data["tinNotAvailable"];

        dropdownvalue = data["capacityOfSignatory"];
        isChecked = data["declaration"];
        sectionC = data["sectionCQue"];
      });
      countryJr1.text = data["countryJurisdiction1"];
      countryJr2.text = data["countryJurisdiction2"];
      countryJr3.text = data["countryJurisdiction3"];
      tin1.text = data["tinFunctionEquivalent1"];
      tin2.text = data["tinFunctionEquivalent2"];
      tin3.text = data["tinFunctionEquivalent3"];

      _typeAheadController.text = data["country1"];
      _typeAheadController2.text = data["country2"];
      _typeAheadController3.text = data["country3"];

      ssn.text = data["ssn"];
      itin.text = data["itin"];
      name.text = data["nameOfSignatory"];
      nameAr.text = data["nameOfSignatoryHijri"];
      name.text = data["nameOfSignatory"];

      date.text = data["date"];
      dateHijri.text = data["dateHigri"];

      building.text = data["buildingNumber"];
      street.text = data["streetName"];
      district.text = data["district"];
      postal.text = data["postalCode"];
      city.text = data["city"];
      country.text = data["country"];
      capacitySpecify.text = data["otherCapacity"];

      setState(() {
        ifnotin1 = data["tinAvailableReason1"];
        ifnotin2 = data["tinAvailableReason2"];
        ifnotin3 = data["tinAvailableReason3"];
      });
    } else {
      print(response.statusCode);
      var errorMessage = response.reasonPhrase;
      print(response.statusCode);
      print(response.body);
      print(jsonDecode(response.body));
      print("Error");
    }
  }

  void senddata() async {
    setState(() {
      btn = "Loading...";
    });
    var url = Uri.parse(
        '${GlobalPermission.urlLink}/api/FatcaAndCrsIndividual/FatcaAndCrsIndividual/');

    try {
      var headers = {
        'Content-Type': 'application/json',
      };

      var body = {
        "clientId": GlobalIndividual.individualclientid,
        "accountHolderInformation": sectionAque,
        "countryJurisdiction1": countryJr1.text,
        "countryJurisdiction2": countryJr2.text,
        "countryJurisdiction3": countryJr3.text,
        "tinFunctionEquivalent1": tin1.text,
        "tinFunctionEquivalent2": tin2.text,
        "tinFunctionEquivalent3": tin3.text,
        "tinAvailableReason1": ifnotin1,
        "tinAvailableReason2": ifnotin2,
        "tinAvailableReason3": ifnotin3,
        "tinNotAvailable": selectedValue,
        "country1": _typeAheadController.text,
        "country2": _typeAheadController2.text,
        "country3": _typeAheadController3.text,
        "ssn": ssn.text,
        "itin": itin.text,
        "nameOfSignatory": name.text,
        "capacityOfSignatory": dropdownvalue,
        "date": date.text,
        "dateHigri": dateHijri.text,
        "nameOfSignatoryHijri": nameAr.text,
        "declaration": isChecked,
        "buildingNumber": building.text,
        "streetName": street.text,
        "district": district.text,
        "city": city.text,
        "postalCode": postal.text,
        "country": country.text,
        "sectionCQue": sectionC,
        "otherCapacity": capacitySpecify.text
      };

      var response =
          await http.post(url, headers: headers, body: jsonEncode(body));

      if (response.statusCode == 200) {
        // print(jsonDecode(response.body));
        GlobalIndividual.getdraftprogressindividual(
            GlobalIndividual.individualclientid);
        tabController?.animateTo(12);
        setState(() {
          btn = "Next";
        });
      } else {
        setState(() {
          btn = "Next";
        });
        print(response.statusCode);
      }
    } catch (e) {
      print(e.toString());
    }
  }

  void putdata(int clientId) async {
    setState(() {
      btn = "Loading...";
    });
    var url = Uri.parse(
        '${GlobalPermission.urlLink}/api/FatcaAndCrsIndividual/FatcaAndCrsIndividual?ClientId=${clientId}');

    try {
      var headers = {
        'Content-Type': 'application/json',
      };

      var body = {
        "clientId": clientId,
        "accountHolderInformation": sectionAque,
        "countryJurisdiction1": countryJr1.text,
        "countryJurisdiction2": countryJr2.text,
        "countryJurisdiction3": countryJr3.text,
        "tinFunctionEquivalent1": tin1.text,
        "tinFunctionEquivalent2": tin2.text,
        "tinFunctionEquivalent3": tin3.text,
        "tinAvailableReason1": ifnotin1,
        "tinAvailableReason2": ifnotin2,
        "tinAvailableReason3": ifnotin3,
        "tinNotAvailable": selectedValue,
        "country1": _typeAheadController.text,
        "country2": _typeAheadController2.text,
        "country3": _typeAheadController3.text,
        "ssn": ssn.text,
        "itin": itin.text,
        "nameOfSignatory": name.text,
        "capacityOfSignatory": dropdownvalue,
        "date": date.text,
        "dateHigri": dateHijri.text,
        "nameOfSignatoryHijri": nameAr.text,
        "declaration": isChecked,
        "buildingNumber": building.text,
        "streetName": street.text,
        "district": district.text,
        "city": city.text,
        "postalCode": postal.text,
        "country": country.text,
        "sectionCQue": sectionC,
        "otherCapacity": capacitySpecify.text
      };

      var response =
          await http.put(url, headers: headers, body: jsonEncode(body));

      if (response.statusCode == 200) {
        // print(jsonDecode(response.body));
        tabController?.animateTo(12);
        setState(() {
          btn = "Next";
        });
      } else {
        setState(() {
          btn = "Next";
        });
        print(response.statusCode);
      }
    } catch (e) {
      print(e.toString());
    }
  }

  @override
  Widget build(BuildContext context) {
    void showHtmlAlert(BuildContext context, String htmlContent) {
      showDialog(
        context: context,
        builder: (BuildContext context) {
          return AlertDialog(
            title:
                Text('Please Click on This Link To Read Relavant Definitions'),
            content: SingleChildScrollView(
              child: Html(data: htmlContent),
            ),
            actions: [
              TextButton(
                onPressed: () {
                  Navigator.of(context).pop();
                },
                child: Text('Close'),
              ),
            ],
          );
        },
      );
    }

    String htmlContent = '''
<html>
	<body>
		<div>
			<img src="data:image/png;base64, "/>
		</div>
	</body>
</html>
''';

    String htmlContent2 = '''

<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=utf-8">
<meta name=Generator content="Microsoft Word 15 (filtered)">
<style>
<!--
 / Font Definitions /
 @font-face
	{font-family:"Cambria Math";
	panose-1:2 4 5 3 5 4 6 3 2 4;}
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;}
 / Style Definitions /
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:8.0pt;
	margin-left:0in;
	line-height:107%;
	font-size:11.0pt;
	font-family:"Calibri",sans-serif;}
p.MsoHeader, li.MsoHeader, div.MsoHeader
	{mso-style-link:"Header Char";
	margin:0in;
	font-size:12.0pt;
	font-family:"Calibri",sans-serif;}
p.MsoFooter, li.MsoFooter, div.MsoFooter
	{mso-style-link:"Footer Char";
	margin:0in;
	font-size:12.0pt;
	font-family:"Calibri",sans-serif;}
span.HeaderChar
	{mso-style-name:"Header Char";
	mso-style-link:Header;}
span.FooterChar
	{mso-style-name:"Footer Char";
	mso-style-link:Footer;}
.MsoChpDefault
	{font-family:"Calibri",sans-serif;}
.MsoPapDefault
	{margin-bottom:8.0pt;
	line-height:107%;}
 / Page Definitions /
 @page WordSection1
	{size:595.0pt 842.0pt;
	margin:96.55pt 1.0in 1.0in 1.0in;}
div.WordSection1
	{page:WordSection1;}
 / List Definitions /
 ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style>

</head>

<body lang=EN-US style='word-wrap:break-word'>

<div class=WordSection1>

<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0
 style='background:white;border-collapse:collapse'>
 <tr>
  <td width=1169 colspan=2 style='width:876.75pt;background:#FCFCFC;padding:
  12.0pt 12.0pt 12.0pt 12.0pt'>
  <p class=MsoNormal><b>COMMON REPORTING STANDARD (CRS) DEFINITIONS</b></p>
  </td>
 </tr>
 <tr>
  <td width=390 style='width:292.25pt;background:#F0F0F0;padding:12.0pt 12.0pt 12.0pt 12.0pt'>
  <p class=MsoNormal><b><span style='color:black'>Account Holder</span></b></p>
  </td>
  <td style='border:none;border-left:dotted #6A6A6A 1.5pt;background:#F0F0F0;
  padding:12.0pt 12.0pt 12.0pt 12.0pt'>
  <p class=MsoNormal><span style='color:black'>Account Holder means the person
  listed or identified as the holder of a Financial Account by the Financial
  Institution that maintains the account. A person, other than a Financial Institution,
  holding a Financial Account for the benefit or account of another person as
  agent, custodian, nominee, signatory, investment advisor, or intermediary, is
  not treated as holding the account for purposes of the Common Reporting
  Standard, and such other person is treated as holding the account.</span></p>
  </td>
 </tr>
 <tr>
  <td width=390 style='width:292.25pt;background:#FCFCFC;padding:12.0pt 12.0pt 12.0pt 12.0pt'>
  <p class=MsoNormal><b><span style='color:black'>Tax Residency</span></b></p>
  </td>
  <td style='border:none;border-left:dotted #6A6A6A 1.5pt;background:#FCFCFC;
  padding:12.0pt 12.0pt 12.0pt 12.0pt'>
  <p class=MsoNormal><span style='color:black'>Tax residency is the country
  where you are resident/registered for tax purposes. Each country has its own
  rules for defining tax residence. For more information on tax residence,
  please consult your tax advisor or check the OECD information readily
  available on the internet.</span></p>
  </td>
 </tr>
 <tr>
  <td width=390 style='width:292.25pt;background:#F0F0F0;padding:12.0pt 12.0pt 12.0pt 12.0pt'>
  <p class=MsoNormal><b><span style='color:black'>Entity</span></b></p>
  </td>
  <td style='border:none;border-left:dotted #6A6A6A 1.5pt;background:#F0F0F0;
  padding:12.0pt 12.0pt 12.0pt 12.0pt'>
  <p class=MsoNormal><span style='color:black'>The term “Entity” means a legal
  person or a legal arrangement, such as a corporation, organization,
  partnership, trust or foundation. This term covers any person other than an
  individual (i.e. a natural person).</span></p>
  </td>
 </tr>
 <tr>
  <td width=390 style='width:292.25pt;background:#FCFCFC;padding:12.0pt 12.0pt 12.0pt 12.0pt'>
  <p class=MsoNormal><b><span style='color:black'>Financial Institution</span></b></p>
  </td>
  <td style='border:none;border-left:dotted #6A6A6A 1.5pt;background:#FCFCFC;
  padding:12.0pt 12.0pt 12.0pt 12.0pt'>
  <p class=MsoNormal><span style='color:black'>The term “Financial Institution”
  means a “Custodial Institution”, a “Depository Institution”, an “Investment
  Entity”, or a “Specified Insurance Company”. Please see the relevant domestic
  guidance and the CRS for further classification definitions that apply to
  Financial Institutions</span></p>
  </td>
 </tr>
 <tr>
  <td width=390 style='width:292.25pt;background:#F0F0F0;padding:12.0pt 12.0pt 12.0pt 12.0pt'>
  <p class=MsoNormal><b><span style='color:black'>Depository Institution</span></b></p>
  </td>
  <td style='border:none;border-left:dotted #6A6A6A 1.5pt;background:#F0F0F0;
  padding:12.0pt 12.0pt 12.0pt 12.0pt'>
  <p class=MsoNormal><span style='color:black'>The term “Depository
  Institution” means any Entity that accepts deposits in the ordinary course of
  a banking or similar business.</span></p>
  </td>
 </tr>
 <tr>
  <td width=390 style='width:292.25pt;background:#FCFCFC;padding:12.0pt 12.0pt 12.0pt 12.0pt'>
  <p class=MsoNormal><b><span style='color:black'>Custodial Institution</span></b></p>
  </td>
  <td style='border:none;border-left:dotted #6A6A6A 1.5pt;background:#FCFCFC;
  padding:12.0pt 12.0pt 12.0pt 12.0pt'>
  <p class=MsoNormal><span style='color:black'>The term “Custodial Institution”
  means any Entity that holds, as a substantial portion of its business,
  Financial Assets for the account of others. This is where the Entity’s gross
  income attributable to the holding of Financial Assets and related financial
  services equals or exceeds 20% of the Entity’s gross income during the
  shorter of: (i) the three-year period that ends on 31 December (or the final
  day of a non-calendar year accounting period) prior to the year in which the
  determination is being made; or (ii) the period during which the Entity has
  been in existence.</span></p>
  </td>
 </tr>
 <tr>
  <td width=390 style='width:292.25pt;background:#F0F0F0;padding:12.0pt 12.0pt 12.0pt 12.0pt'>
  <p class=MsoNormal><b><span style='color:black'>Controlling Person(s)</span></b></p>
  </td>
  <td style='border:none;border-left:dotted #6A6A6A 1.5pt;background:#F0F0F0;
  padding:12.0pt 12.0pt 12.0pt 12.0pt'>
  <p class=MsoNormal><span style='color:black'>“Controlling Persons” are the
  natural person(s) who exercise control over an entity. Where that entity is
  treated as a Passive Non-Financial Entity (“Passive NFE”) then a Financial
  Institution is required to determine whether or not these Controlling Persons
  are Reportable Persons. This definition corresponds to the term “beneficial
  owner” described in Recommendation 10 and the Interpretative Note on
  Recommendation 10 of the Financial Action Task Force Recommendations (as
  adopted in February 2012). In the case of a trust, the Controlling Person(s)
  are the settlor(s), the trustee(s), the protector(s) (if any), the
  beneficiary(is) or class(es) of beneficiaries, or any other natural person(s)
  exercising ultimate effective control over the trust (including through a
  chain of control or ownership). Under the CRS the settlor(s), the trustee(s),
  the protector(s) (if any), and the beneficiary(ies) or class(es) of
  beneficiaries, are always treated as Controlling Persons of a trust,
  regardless of whether or not any of them exercises control over the
  activities of the trust.<br>
  Where the settlor(s) of a trust is an Entity then the CRS requires Financial
  Institutions to also identify the Controlling Persons of the settlor(s) and
  when required report them as Controlling Persons of the trust. In the case of
  a legal arrangement other than a trust, “Controlling Person(s) means persons
  in equivalent or similar positions FATF Recommendations on Controlling
  Persons:<br>
  Identify the beneficial owners of the customer and take reasonable measures
  to verify the identity of such persons, through the following information.
  For legal persons: The identity of the natural persons (if any – as ownership
  interests can be so diversified that there are no natural persons (whether
  acting alone or together) exercising control of the legal person or
  arrangement through ownership) who ultimately have a controlling ownership
  interest in a legal person; and to the extent that there is doubt under (a)
  as to whether the person(s) with the controlling ownership interest are the
  beneficial owner(s) or where no natural person exerts control through
  ownership interests, the identity of the natural persons (if any) exercising
  control of the legal person or arrangement through other means. Where no
  natural person is identified under (a) or (b) above, financial institutions
  should identify and take reasonable measures to verify the identity of the
  relevant natural person who holds the position of senior managing official.</span></p>
  </td>
 </tr>
 <tr>
  <td width=390 style='width:292.25pt;background:#FCFCFC;padding:12.0pt 12.0pt 12.0pt 12.0pt'>
  <p class=MsoNormal><b><span style='color:black'>Active NFE</span></b></p>
  </td>
  <td style='border:none;border-left:dotted #6A6A6A 1.5pt;background:#FCFCFC;
  padding:12.0pt 12.0pt 12.0pt 12.0pt'>
  <p class=MsoNormal><span style='color:black'>An NFE is an Active NFE if it
  meets any of the criteria listed below. In summary, those criteria refer to:</span></p>
  <ul style='margin-top:0in' type=disc>
   <li class=MsoNormal><span style='color:black'>active NFEs by reason of
       income and assets;</span></li>
   <li class=MsoNormal><span style='color:black'>publicly traded NFEs;</span></li>
   <li class=MsoNormal><span style='color:black'>Governmental Entities,
       International Organizations, Central Banks, or their wholly owned
       Entities;</span></li>
   <li class=MsoNormal><span style='color:black'>holding NFEs that are members
       of a nonfinancial group;</span></li>
   <li class=MsoNormal><span style='color:black'>start-up NFEs;</span></li>
   <li class=MsoNormal><span style='color:black'>NFEs that are liquidating or
       emerging from bankruptcy;</span></li>
   <li class=MsoNormal><span style='color:black'>treasury centers that are
       members of a nonfinancial group; or</span></li>
   <li class=MsoNormal><span style='color:black'>non-profit NFEs.</span></li>
  </ul>
  <p class=MsoNormal><span style='color:black'><br>
  An entity will be classified as Active NFE if it meets any of the following
  criteria:<br>
  a) less than 50% of the NFE’s gross income for the preceding calendar year or
  other appropriate reporting period is passive income and less than 50% of the
  assets held by the NFE during the preceding calendar year or other
  appropriate reporting period are assets that produce or are held for the
  production of passive income;<br>
  b) the stock of the NFE is regularly traded on an established securities
  market or the NFE is a Related Entity of an Entity the stock of which is
  regularly traded on an established securities market;<br>
  c) the NFE is a Governmental Entity, an International Organization, a Central
  Bank, or an Entity wholly owned by one or more of the foregoing;<br>
  d) substantially all of the activities of the NFE consist of holding (in
  whole or in part) the outstanding stock of, or providing financing and
  services to, one or more subsidiaries that engage in trades or businesses other
  than the business of a Financial Institution, except that an Entity does not
  qualify for this status if the Entity functions (or holds itself out) as an
  investment fund, such as a private equity fund, venture capital fund,
  leveraged buyout fund, or any investment vehicle whose purpose is to acquire
  or fund companies and then hold interests in those companies as capital
  assets for investment purposes;<br>
  e) the NFE is not yet operating a business and has no prior operating
  history, (a “ start-up NFE”) but is investing capital into assets with the
  intent to operate a business other than that of a Financial Institution,
  provided that the NFE does not qualify for this exception after the date that
  is 24 months after the date of the initial organization of the NFE;<br>
  f) the NFE was not a Financial Institution in the past five years, and is in
  the process of liquidating its assets or is reorganizing with the intent to
  continue or recommence operations in a business other than that of a
  Financial Institution;<br>
  g) the NFE primarily engages in financing and hedging transactions with, or
  for, Related Entities that are not Financial Institutions, and does not
  provide financing or hedging services to any Entity that is not a Related
  Entity, provided that the group of any such Related Entities is primarily
  engaged in a business other than that of a Financial Institution; or<br>
  h) the NFE meets all of the following requirements (a “non-profit NFE”):<br>
  i) it is established and operated in its jurisdiction of residence
  exclusively for religious, charitable, scientific, artistic, cultural,
  athletic, or educational purposes; or it is established and operated in its
  jurisdiction of residence and it is a professional organization, business
  league, chamber of commerce, labor organization, agricultural or
  horticultural organization, civic league or an organization operated
  exclusively for the promotion of social welfare; ii) it is exempt from income
  tax in its jurisdiction of residence;<br>
  iii) it has no shareholders or members who have a proprietary or beneficial
  interest in its income or assets;<br>
  iv) the applicable laws of the NFE’s jurisdiction of residence or the NFE’s
  formation documents do not permit any income or assets of the NFE to be
  distributed to, or applied for the benefit of, a private person or
  non-charitable Entity other than pursuant to the conduct of the NFE’s
  charitable activities, or as payment of reasonable compensation for services
  rendered, or as payment representing the fair market value of property which
  the NFE has purchased; and<br>
  v) the applicable laws of the NFE’s jurisdiction of residence or the NFE’s
  formation documents require that, upon the NFE’s liquidation or dissolution,
  all of its assets be distributed to a Governmental Entity or other non-profit
  organization, or escheat to the government of the NFE’s jurisdiction of
  residence or any political subdivision.<br>
  Note: Certain entities (such as U.S. Territory NFFEs) may qualify for Active
  NFFE status under FATCA but not Active NFE status under the CRS.<br>
  Related Entity - An Entity is a “Related Entity” of another Entity if either
  Entity controls the other Entity, or the two Entities are under common
  control. For this purpose, control includes direct or indirect ownership of
  more than 50% of the vote and value in an Entity.</span></p>
  </td>
 </tr>
 <tr>
  <td width=390 style='width:292.25pt;background:#F0F0F0;padding:12.0pt 12.0pt 12.0pt 12.0pt'>
  <p class=MsoNormal><b><span style='color:black'>Passive NFE</span></b></p>
  </td>
  <td style='border:none;border-left:dotted #6A6A6A 1.5pt;background:#F0F0F0;
  padding:12.0pt 12.0pt 12.0pt 12.0pt'>
  <p class=MsoNormal><span style='color:black'>Under the CRS a “Passive NFE”
  means any NFE that is not an Active NFE. An Investment Entity located in a
  Non-Participating Jurisdiction and managed by another Financial Institution
  is also treated as a Passive NFE for purposes of the CRS.</span></p>
  </td>
 </tr>
 <tr>
  <td width=390 style='width:292.25pt;background:#FCFCFC;padding:12.0pt 12.0pt 12.0pt 12.0pt'>
  <p class=MsoNormal><b><span style='color:black'>Specified Insurance Company</span></b></p>
  </td>
  <td style='border:none;border-left:dotted #6A6A6A 1.5pt;background:#FCFCFC;
  padding:12.0pt 12.0pt 12.0pt 12.0pt'>
  <p class=MsoNormal><span style='color:black'>The term “Specified Insurance
  Company” means any Entity that is an insurance company (or the holding
  company of an insurance company) that issues, or is obligated to make
  payments with respect to, a Cash Value Insurance Contract or an Annuity
  Contract.</span></p>
  </td>
 </tr>
 <tr>
  <td width=390 style='width:292.25pt;background:#F0F0F0;padding:12.0pt 12.0pt 12.0pt 12.0pt'>
  <p class=MsoNormal><b><span style='color:black'>Participating Jurisdiction
  Financial Institution</span></b></p>
  </td>
  <td style='border:none;border-left:dotted #6A6A6A 1.5pt;background:#F0F0F0;
  padding:12.0pt 12.0pt 12.0pt 12.0pt'>
  <p class=MsoNormal><span style='color:black'>The term “Participating
  Jurisdiction Financial Institution means (i) any Financial Institution that
  is tax resident in a Participating Jurisdiction, but excludes any branch of
  that Financial Institution that is located outside of that jurisdiction, and
  (ii) any branch of a Financial Institution that is not tax resident in a
  Participating Jurisdiction, if that branch is located in such Participating
  Jurisdiction.</span></p>
  </td>
 </tr>
 <tr>
  <td width=390 style='width:292.25pt;background:#FCFCFC;padding:12.0pt 12.0pt 12.0pt 12.0pt'>
  <p class=MsoNormal><b><span style='color:black'>Non-Reporting Financial
  Institution</span></b></p>
  </td>
  <td style='border:none;border-left:dotted #6A6A6A 1.5pt;background:#FCFCFC;
  padding:12.0pt 12.0pt 12.0pt 12.0pt'>
  <p class=MsoNormal><span style='color:black'>A &quot;Non-Reporting Financial
  Institution” means any Financial Institution that is:</span></p>
  <ul style='margin-top:0in' type=disc>
   <li class=MsoNormal><span style='color:black'>a Governmental Entity,
       International Organization or Central Bank, other than with respect to a
       payment that is derived from an obligation held in connection with a
       commercial financial activity of a type engaged in by a Specified
       Insurance Company, Custodial Institution, or Depository Institution;</span></li>
   <li class=MsoNormal><span style='color:black'>a Broad Participation
       Retirement Fund; a Narrow Participation Retirement Fund; a Pension Fund
       of a Governmental Entity, International Organization or Central Bank; or
       a Qualified Credit Card Issuer;</span></li>
   <li class=MsoNormal><span style='color:black'>an Exempt Collective
       Investment Vehicle; or</span></li>
   <li class=MsoNormal><span style='color:black'>a Trustee-Documented Trust: a
       trust where the trustee of the trust is a Reporting Financial
       Institution and reports all information required to be reported with
       respect to all Reportable Accounts of the trust;</span></li>
   <li class=MsoNormal><span style='color:black'>any other defined in a
       countries domestic law as a Non-Reporting Financial Institution.</span></li>
  </ul>
  </td>
 </tr>
 <tr>
  <td width=390 style='width:292.25pt;background:#F0F0F0;padding:12.0pt 12.0pt 12.0pt 12.0pt'>
  <p class=MsoNormal><b><span style='color:black'>Related Entity</span></b></p>
  </td>
  <td style='border:none;border-left:dotted #6A6A6A 1.5pt;background:#F0F0F0;
  padding:12.0pt 12.0pt 12.0pt 12.0pt'>
  <p class=MsoNormal><span style='color:black'>Related Entity means an entity
  related to another entity because (i) either entity controls the other
  entity; (ii) the two entities are under common control; or (iii) the two
  entities are Investment Entities are under common management, and such
  management fulfils the due diligence obligations of such Investment Entities.
  For this purpose, control includes direct or indirect ownership of more than
  50 % of the vote and value in an Entity.</span></p>
  </td>
 </tr>
 <tr>
  <td width=1169 colspan=2 style='width:876.75pt;background:#FCFCFC;padding:
  12.0pt 12.0pt 12.0pt 12.0pt'>
  <p class=MsoNormal><b><span style='color:black'>COMMON FATCA &amp; CRS
  DEFINITIONS</span></b></p>
  </td>
 </tr>
 <tr>
  <td width=390 style='width:292.25pt;background:#F0F0F0;padding:12.0pt 12.0pt 12.0pt 12.0pt'>
  <p class=MsoNormal><b><span style='color:black'>TAX Identification Number
  (TIN)</span></b></p>
  </td>
  <td style='border:none;border-left:dotted #6A6A6A 1.5pt;background:#F0F0F0;
  padding:12.0pt 12.0pt 12.0pt 12.0pt'>
  <p class=MsoNormal><span style='color:black'>A Taxpayer Identification /
  Information Number (TIN) is a unique combination of letters and/or numbers
  assigned to the person or you/your entity. Some countries do not issue a TIN,
  but may rely on other issued numbers such as social security/insurance numbers
  or company registration numbers for entities. You may need to provide these
  if requested. The OECD has published a list of the acceptable Taxpayer
  Identification Number (TIN) formats and their alternatives.<br>
  For US Persons and/or tax residents, a US TIN can be one of the following:</span></p>
  <ul style='margin-top:0in' type=disc>
   <li class=MsoNormal><span style='color:black'>Social Security Number (SSN)</span></li>
   <li class=MsoNormal><span style='color:black'>Individuals Tax Identification
       Number (ITIN)</span></li>
   <li class=MsoNormal><span style='color:black'>Tax Identification Number for
       Pending US Adoptions (ATIN)</span></li>
  </ul>
  </td>
 </tr>
 <tr>
  <td width=390 style='width:292.25pt;background:#FCFCFC;padding:12.0pt 12.0pt 12.0pt 12.0pt'>
  <p class=MsoNormal><b><span style='color:black'>Beneficial Owner</span></b></p>
  </td>
  <td style='border:none;border-left:dotted #6A6A6A 1.5pt;background:#FCFCFC;
  padding:12.0pt 12.0pt 12.0pt 12.0pt'>
  <p class=MsoNormal><span style='color:black'>The term beneficial owner means
  the person who is the owner of the income for tax purposes and who
  beneficially owns that income. Thus, a person receiving income in a capacity
  as a nominee, agent or custodian for another person is not the beneficial
  owner of the income.</span></p>
  </td>
 </tr>
 <tr>
  <td width=390 style='width:292.25pt;background:#F0F0F0;padding:12.0pt 12.0pt 12.0pt 12.0pt'>
  <p class=MsoNormal><b><span style='color:black'>Change in Circumstance</span></b></p>
  </td>
  <td style='border:none;border-left:dotted #6A6A6A 1.5pt;background:#F0F0F0;
  padding:12.0pt 12.0pt 12.0pt 12.0pt'>
  <p class=MsoNormal><span style='color:black'>A change in circumstance is one
  that either results in the change of or conflicts with a person’s current
  status. These circumstances can include a change in the account holder’s
  status, account, or any other related account.</span></p>
  </td>
 </tr>
 <tr>
  <td width=390 style='width:292.25pt;background:#FCFCFC;padding:12.0pt 12.0pt 12.0pt 12.0pt'>
  <p class=MsoNormal><b><span style='color:black'>Self-Certification Forms</span></b></p>
  </td>
  <td style='border:none;border-left:dotted #6A6A6A 1.5pt;background:#FCFCFC;
  padding:12.0pt 12.0pt 12.0pt 12.0pt'>
  <p class=MsoNormal><span style='color:black'>A completed self-certification
  form is used to confirm your FATCA classification &amp; Tax residency status
  under the CRS.</span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal><span lang=AR-SA dir=RTL style='font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal>&nbsp;</p>

</div>

</body>

</html>
''';

    // List of items in our dropdown menu
    var items = [
      'Account Holder',
      'Power Of Attorney',
      'Guardian',
      'Other',
    ];
    var items2 = [
      'Account Holder',
      'Power Of Attorney',
      'Guardian',
      'Other',
    ];

    var NoTIN = [
      'A',
      'B',
      'C',
    ];
    var citizenship = [
      'Albania',
      'Algeria',
      'Andorra',
      'Angola',
      'Antigua and Barbuda',
      'Argentina',
      'Armenia',
      'Australia',
      'Austria',
      'Azerbaijan',
      'The Bahamas',
      'Bahrain',
      'Bangladesh',
      'Barbados',
      'Belarus',
      'Belgium',
      'Belize',
      'Benin',
      'Bhutan',
      'Bolivia',
      'Bosnia and Herzegovina',
      'Botswana',
      'Brazil',
      'Brunei',
      'Bulgaria',
      'Burkina Faso',
      'Burundi',
      'Cabo Verde',
      'Cambodia',
      'Cameroon',
      'Canada',
      'Central African Republic',
      'Chad',
      'Chile',
      'China',
      'Colombia',
      'Comoros',
      'Congo, Democratic Republic of the',
      'Congo, Republic of the',
      'Costa Rica',
      'Croatia',
      'Cuba',
      'Cyprus',
      'Czech Republic',
      'Denmark',
      'Djibouti',
      'Dominica',
      'Dominican Republic',
      'East Timor (Timor-Leste)',
      'Ecuador',
      'Egypt',
      'El Salvador',
      'Equatorial Guinea',
      'Eritrea',
      'Estonia',
      'Ethiopia',
      'Fiji',
      'Finland',
      'France',
      'Gabon',
      'Gambia',
      'Georgia',
      'Germany',
      'Ghana',
      'Greece',
      'Grenada',
      'Guatemala',
      'Guinea',
      'Guinea-Bissau',
      'Guyana',
      'Haiti',
      'Honduras',
      'Hungary',
      'Iceland',
      'India',
      'Indonesia',
      'Iran',
      'Iraq',
      'Ireland',
      'Israel',
      'Italy',
      'Ivory Coast (Côte d Ivoire)',
      'Jamaica',
      'Japan',
      'Jordan',
      'Kazakhstan',
      'Kenya',
      'Kiribati',
      'Korea, North',
      'Korea, South',
      'Kosovo',
      'Kuwait',
      'Kyrgyzstan',
      'Laos',
      'Latvia',
      'Lebanon',
      'Lesotho',
      'Liberia',
      'Libya',
      'Liechtenstein',
      'Lithuania',
      'Luxembourg',
      'Macedonia',
      'Madagascar',
      'Malawi',
      'Malaysia',
      'Maldives',
      'Mali',
      'Malta',
      'Marshall Islands',
      'Mauritania',
      'Mauritius',
      'Mexico',
      'Micronesia',
      'Moldova',
      'Monaco',
      'Mongolia',
      'Montenegro',
      'Morocco',
      'Mozambique',
      'Myanmar',
      'Namibia',
      'Nauru',
      'Nepal',
      'Netherlands',
      'New Zealand',
      'Nicaragua',
      'Niger',
      'Nigeria',
      'Norway',
      'Oman',
      'Pakistan',
      'Palau',
      'Panama',
      'Papua New Guinea',
      'Paraguay',
      'Peru',
      'Philippines',
      'Poland',
      'Portugal',
      'Qatar',
      'Romania',
      'Russia',
      'Rwanda',
      'Saint Kitts and Nevis',
      'Saint Lucia',
      'Saint Vincent and the Grenadines',
      'Samoa',
      'San Marino',
      'Sao Tome and Principe',
      'Saudi Arabia',
      'Senegal',
      'Serbia',
      'Seychelles',
      'Sierra Leone',
      'Singapore',
      'Slovakia',
      'Slovenia',
      'Solomon Islands',
      'Somalia',
      'South Africa',
      'South Sudan',
      'Spain',
      'Sri Lanka',
      'Sudan',
      'Suriname',
      'Swaziland',
      'Sweden',
      'Switzerland',
      'Syria',
      'Taiwan',
      'Tajikistan',
      'Tanzania',
      'Thailand',
      'Togo',
      'Tonga',
      'Trinidad and Tobago',
      'Tunisia',
      'Turkey',
      'Turkmenistan',
      'Tuvalu',
      'Uganda',
      'Ukraine',
      'United Arab Emirates (UAE)',
      'United Kingdom (UK)',
      'United States of America (USA)',
      'Uruguay',
      'Uzbekistan',
      'Vanuatu',
      'Vatican City (Holy See)',
      'Venezuela',
      'Vietnam',
      'Yemen',
      'Zambia',
      'Zimbabwe'
    ];

    String? numberValidator(String? value) {
      if (value == null) {
        return "";
      }
      final n = num.tryParse(value);
      if (n == null) {
        return '$value Invalid';
      }
    }

    return Scaffold(
      body: Container(
        child: SingleChildScrollView(
          child: Form(
            key: _formKey,
            child: Column(
              children: [
                Container(
                  margin: EdgeInsets.symmetric(vertical: 15),
                  width: double.infinity,
                  height: 45,
                  decoration: BoxDecoration(
                    color: ColorSelect.east_grey,
                    border: Border.all(
                      color: ColorSelect.tabBorderColor,
                    ),
                  ),
                  child: Padding(
                    padding: EdgeInsets.only(left: 50),
                    child: Align(
                        alignment: Alignment.centerLeft,
                        child: Text(
                          S
                              .of(context)
                              .SectionACustomerAccountHolderInformation,
                          style: TextController.SubHeadingText,
                        )),
                  ),
                ),
                Container(
                  padding: EdgeInsets.symmetric(horizontal: 50),
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      Column(
                        children: [
                          Text(
                            "Title",
                            style: TextController.BodyText,
                          ),
                          SizedBox(
                            height: 10,
                          ),
                          Container(
                            padding: EdgeInsets.symmetric(horizontal: 10),
                            width: 150,
                            height: 35,
                            alignment: Alignment.centerLeft,
                            decoration: BoxDecoration(
                                color: Colors.white,
                                border:
                                    Border.all(color: ColorSelect.textField)),
                            child: DropdownButton<String>(
                              hint: Text("Select Here",
                                  style: TextController.labelText),
                              value: titledrop,
                              isExpanded: true,
                              underline: Container(),
                              iconEnabledColor: ColorSelect.east_dark_blue,
                              items: title.map(
                                (String items) {
                                  return DropdownMenuItem(
                                    value: items,
                                    child: Text(
                                      items,
                                      style: TextController.BodyText,
                                    ),
                                  );
                                },
                              ).toList(),
                              onChanged: (NewValue) {
                                setState(
                                  () {
                                    titledrop = NewValue!;
                                  },
                                );
                              },
                            ),
                          ),
                        ],
                      ),
                      Column(
                        children: [
                          Text(
                            S.of(context).Name,
                            style: TextController.BodyText,
                          ),
                          Text(
                            S.of(context).InArabic,
                            style: TextController.BodyText,
                          ),
                          Row(
                            children: [
                              ValueListenableBuilder(
                                builder: (
                                  BuildContext context,
                                  String value,
                                  Widget? child,
                                ) {
                                  return Center(child: Text(value));
                                },
                                valueListenable: FATCA.familyNameArabic,
                              ),
                              SizedBox(
                                width: 15,
                              ),
                              ValueListenableBuilder(
                                builder: (
                                  BuildContext context,
                                  String value,
                                  Widget? child,
                                ) {
                                  return Center(child: Text(value));
                                },
                                valueListenable: FATCA.grandFatherNameArabic,
                              ),
                              SizedBox(
                                width: 15,
                              ),
                              ValueListenableBuilder(
                                builder: (
                                  BuildContext context,
                                  String value,
                                  Widget? child,
                                ) {
                                  return Center(child: Text(value));
                                },
                                valueListenable: FATCA.fatherNameArabic,
                              ),
                              SizedBox(
                                width: 15,
                              ),
                              ValueListenableBuilder(
                                builder: (
                                  BuildContext context,
                                  String value,
                                  Widget? child,
                                ) {
                                  return Center(child: Text(value));
                                },
                                valueListenable: FATCA.firstNameArabic,
                              ),
                              SizedBox(
                                width: 15,
                              ),
                            ],
                          )
                        ],
                      ),
                      Column(
                        children: [
                          Text(
                            S.of(context).Name,
                            style: TextController.BodyText,
                          ),
                          Text(
                            "(In English)",
                            style: TextController.BodyText,
                          ),
                          Row(
                            children: [
                              ValueListenableBuilder(
                                builder: (
                                  BuildContext context,
                                  String value,
                                  Widget? child,
                                ) {
                                  return Center(child: Text(value));
                                },
                                valueListenable: FATCA.firstNAme,
                              ),
                              SizedBox(
                                width: 15,
                              ),
                              ValueListenableBuilder(
                                builder: (
                                  BuildContext context,
                                  String value,
                                  Widget? child,
                                ) {
                                  return Center(child: Text(value));
                                },
                                valueListenable: FATCA.fatherName,
                              ),
                              SizedBox(
                                width: 15,
                              ),
                              ValueListenableBuilder(
                                builder: (
                                  BuildContext context,
                                  String value,
                                  Widget? child,
                                ) {
                                  return Center(child: Text(value));
                                },
                                valueListenable: FATCA.grandFatherName,
                              ),
                              SizedBox(
                                width: 15,
                              ),
                              ValueListenableBuilder(
                                builder: (
                                  BuildContext context,
                                  String value,
                                  Widget? child,
                                ) {
                                  return Center(child: Text(value));
                                },
                                valueListenable: FATCA.familyName,
                              ),
                            ],
                          )
                        ],
                      ),
                      Column(
                        children: [
                          Text(
                            S.of(context).PlaceOfBirth,
                            style: TextController.BodyText,
                          ),
                          ValueListenableBuilder(
                            builder: (
                              BuildContext context,
                              String value,
                              Widget? child,
                            ) {
                              return Center(child: Text(value));
                            },
                            valueListenable: FATCA.placeOfBirth,
                          ),
                        ],
                      ),
                      Column(
                        children: [
                          Text(
                            S.of(context).DateOfBirth,
                            style: TextController.BodyText,
                          ),
                          // SizedBox(
                          //   width: 15,
                          // ),
                          ValueListenableBuilder(
                            builder: (
                              BuildContext context,
                              String value,
                              Widget? child,
                            ) {
                              return Center(child: Text(value));
                            },
                            valueListenable: FATCA.dob,
                          ),
                        ],
                      )
                    ],
                  ),
                ),
                // Container(
                //   padding: EdgeInsets.symmetric(horizontal: 50),
                //   child: Row(
                //     //mainAxisAlignment: MainAxisAlignment.spaceBetween,
                //     children: [
                //       Column(
                //         mainAxisAlignment: MainAxisAlignment.start,
                //         crossAxisAlignment: CrossAxisAlignment.start,
                //         children: [],
                //       ),
                //       SizedBox(
                //         width: 10,
                //       ),
                //     ],
                //   ),
                // ),
                // Container(
                //   padding: EdgeInsets.symmetric(horizontal: 50),
                //   child: Row(
                //     children: [
                //       SizedBox(
                //         width: 15,
                //       ),
                //       SizedBox(
                //         width: 15,
                //       ),
                //       SizedBox(
                //         width: 15,
                //       ),
                //       Text(
                //         S.of(context).DOBHijri,
                //         style: TextController.BodyText,
                //       ),
                //       SizedBox(
                //         width: 15,
                //       ),
                //       ValueListenableBuilder(
                //         builder: (
                //           BuildContext context,
                //           String value,
                //           Widget? child,
                //         ) {
                //           return Center(child: Text(value));
                //         },
                //         valueListenable: FATCA.dobHijri,
                //       ),
                //     ],
                //   ),
                // ),
                SizedBox(
                  height: 20,
                ),
                Container(
                  padding: EdgeInsets.symmetric(horizontal: 50),
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.start,
                    children: [
                      Text(
                        "Current Residence Address",
                        style: TextController.BodyHeadingText,
                      ),
                    ],
                  ),
                ),
                SizedBox(
                  height: 20,
                ),
                Container(
                  padding: EdgeInsets.symmetric(
                    horizontal: 50,
                  ),
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            S.of(context).BuildingNo,
                            style: TextController.BodyText,
                          ),
                          SizedBox(
                            height: 10,
                          ),
                          Container(
                            height: 35,
                            width: 150,
                            child: ValueListenableBuilder(
                              builder: (
                                BuildContext context,
                                String value,
                                Widget? child,
                              ) {
                                return Center(child: Text(value));
                              },
                              valueListenable: FATCA.buildingNum,
                            ),
                          ),
                        ],
                      ),
                      // SizedBox(
                      //   width: 15,
                      // ),

                      // SizedBox(
                      //   width: 15,
                      // ),
                      Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            S.of(context).StreetName,
                            style: TextController.BodyText,
                          ),
                          SizedBox(
                            height: 10,
                          ),
                          Container(
                            height: 35,
                            width: 150,
                            child: ValueListenableBuilder(
                              builder: (
                                BuildContext context,
                                String value,
                                Widget? child,
                              ) {
                                return Center(child: Text(value));
                              },
                              valueListenable: FATCA.streetNAme,
                            ),
                          ),
                        ],
                      ),
                      // SizedBox(
                      //   width: 15,
                      // ),
                      // ValueListenableBuilder(
                      //   builder: (
                      //     BuildContext context,
                      //     String value,
                      //     Widget? child,
                      //   ) {
                      //     return Center(child: Text(value));
                      //   },
                      //   valueListenable: FATCA.buildingNum,
                      // ),
                      // SizedBox(
                      //   width: 15,
                      // ),
                      Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            S.of(context).District,
                            style: TextController.BodyText,
                          ),
                          SizedBox(
                            height: 10,
                          ),
                          ValueListenableBuilder(
                            builder: (
                              BuildContext context,
                              String value,
                              Widget? child,
                            ) {
                              return Center(child: Text(value));
                            },
                            valueListenable: FATCA.district,
                          ),
                        ],
                      ),

                      // ValueListenableBuilder(
                      //   builder: (
                      //     BuildContext context,
                      //     String value,
                      //     Widget? child,
                      //   ) {
                      //     return Center(child: Text(value));
                      //   },
                      //   valueListenable: FATCA.postalCode,
                      // ),
                      Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            S.of(context).City,
                            style: TextController.BodyText,
                          ),
                          SizedBox(
                            height: 10,
                          ),
                          ValueListenableBuilder(
                            builder: (
                              BuildContext context,
                              String value,
                              Widget? child,
                            ) {
                              return Center(child: Text(value));
                            },
                            valueListenable: FATCA.city,
                          ),
                        ],
                      ),
                      Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            S.of(context).PostalCode,
                            style: TextController.BodyText,
                          ),
                          SizedBox(
                            height: 10,
                          ),
                          ValueListenableBuilder(
                            builder: (
                              BuildContext context,
                              String value,
                              Widget? child,
                            ) {
                              return Center(child: Text(value));
                            },
                            valueListenable: FATCA.postalCode,
                          ),
                        ],
                      ),
                      Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            S.of(context).Country,
                            style: TextController.BodyText,
                          ),
                          SizedBox(
                            height: 10,
                          ),
                          ValueListenableBuilder(
                            builder: (
                              BuildContext context,
                              String value,
                              Widget? child,
                            ) {
                              return Center(child: Text(value));
                            },
                            valueListenable: FATCA.country,
                          ),
                        ],
                      ),
                    ],
                  ),
                ),
                // SizedBox(
                //   height: 20,
                // ),
                // Container(
                //   padding: EdgeInsets.symmetric(horizontal: 50),
                //   child: Row(
                //     children: [
                //       Text(
                //         S.of(context).State,
                //         style: TextController.BodyText,
                //       ),
                //       SizedBox(
                //         width: 15,
                //       ),
                //       ValueListenableBuilder(
                //         builder: (
                //           BuildContext context,
                //           String value,
                //           Widget? child,
                //         ) {
                //           return Center(child: Text(value));
                //         },
                //         valueListenable: FATCA.state,
                //       ),
                //       SizedBox(
                //         width: 15,
                //       ),
                //       Text(
                //         S.of(context).District,
                //         style: TextController.BodyText,
                //       ),
                //       SizedBox(
                //         width: 15,
                //       ),
                //       ValueListenableBuilder(
                //         builder: (
                //           BuildContext context,
                //           String value,
                //           Widget? child,
                //         ) {
                //           return Center(child: Text(value));
                //         },
                //         valueListenable: FATCA.district,
                //       ),
                //     ],
                //   ),
                // ),
                // SizedBox(
                //   height: 20,
                // ),
                // Container(
                //   padding: EdgeInsets.symmetric(horizontal: 50),
                //   child: Row(
                //     children: [
                //       Text(
                //         S.of(context).City,
                //         style: TextController.BodyText,
                //       ),
                //       SizedBox(
                //         width: 15,
                //       ),
                //       ValueListenableBuilder(
                //         builder: (
                //           BuildContext context,
                //           String value,
                //           Widget? child,
                //         ) {
                //           return Center(child: Text(value));
                //         },
                //         valueListenable: FATCA.city,
                //       ),
                //       SizedBox(
                //         width: 15,
                //       ),
                //       Text(
                //         S.of(context).StreetName,
                //         style: TextController.BodyText,
                //       ),
                //       SizedBox(
                //         width: 15,
                //       ),
                //       ValueListenableBuilder(
                //         builder: (
                //           BuildContext context,
                //           String value,
                //           Widget? child,
                //         ) {
                //           return Center(child: Text(value));
                //         },
                //         valueListenable: FATCA.streetNAme,
                //       ),
                //     ],
                //   ),
                // ),
                SizedBox(
                  height: 20,
                ),
                Container(
                  padding: EdgeInsets.symmetric(horizontal: 50),
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.start,
                    children: [
                      Text(
                        "Mailing Address (if different from the Current Residence)",
                        style: TextController.BodyHeadingText,
                      ),
                    ],
                  ),
                ),
                SizedBox(
                  height: 20,
                ),
                Container(
                  padding: EdgeInsets.symmetric(
                    horizontal: 50,
                  ),
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            S.of(context).BuildingNo,
                            style: TextController.BodyText,
                          ),
                          SizedBox(
                            height: 15,
                          ),
                          Container(
                            padding: EdgeInsets.symmetric(horizontal: 10),
                            width: 150,
                            height: 35,
                            alignment: Alignment.centerLeft,
                            decoration: BoxDecoration(
                                color: Colors.white,
                                border:
                                    Border.all(color: ColorSelect.textField)),
                            child: TextFormField(
                              // inputFormatters: [
                              //   FilteringTextInputFormatter.allow(
                              //       RegExp(r'[a-zA-Z ]')),
                              // ],
                              // validator: (value) {
                              //   if (value!.isEmpty) {
                              //     setState(() {
                              //       firstNameEn = true;
                              //     });
                              //   } else {
                              //     setState(() {
                              //       firstNameEn = false;
                              //     });
                              //   }
                              // },
                              controller: building,
                              textAlignVertical: TextAlignVertical.center,
                              style: TextController.BodyText,
                              decoration: InputDecoration(
                                isDense: true,
                                hintText: S.of(context).TypeHere,
                                hintStyle: TextController.labelText,
                                border: InputBorder.none,
                                errorStyle: TextController.inputErrorText,
                              ),
                            ),
                          )
                        ],
                      ),
                      // SizedBox(
                      //   width: 15,
                      // ),
                      // ValueListenableBuilder(
                      //   builder: (
                      //     BuildContext context,
                      //     String value,
                      //     Widget? child,
                      //   ) {
                      //     return Center(child: Text(value));
                      //   },
                      //   valueListenable: FATCA.country,
                      // ),
                      // SizedBox(
                      //   width: 15,
                      // ),
                      Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            S.of(context).StreetName,
                            style: TextController.BodyText,
                          ),
                          SizedBox(
                            height: 15,
                          ),
                          Container(
                            padding: EdgeInsets.symmetric(horizontal: 10),
                            width: 150,
                            height: 35,
                            alignment: Alignment.centerLeft,
                            decoration: BoxDecoration(
                                color: Colors.white,
                                border:
                                    Border.all(color: ColorSelect.textField)),
                            child: TextFormField(
                              // inputFormatters: [
                              //   FilteringTextInputFormatter.allow(
                              //       RegExp(r'[a-zA-Z ]')),
                              // ],
                              // validator: (value) {
                              //   if (value!.isEmpty) {
                              //     setState(() {
                              //       firstNameEn = true;
                              //     });
                              //   } else {
                              //     setState(() {
                              //       firstNameEn = false;
                              //     });
                              //   }
                              // },
                              controller: street,
                              textAlignVertical: TextAlignVertical.center,
                              style: TextController.BodyText,
                              decoration: InputDecoration(
                                isDense: true,
                                hintText: S.of(context).TypeHere,
                                hintStyle: TextController.labelText,
                                border: InputBorder.none,
                                errorStyle: TextController.inputErrorText,
                              ),
                            ),
                          )
                        ],
                      ),
                      // SizedBox(
                      //   width: 15,
                      // ),
                      // ValueListenableBuilder(
                      //   builder: (
                      //     BuildContext context,
                      //     String value,
                      //     Widget? child,
                      //   ) {
                      //     return Center(child: Text(value));
                      //   },
                      //   valueListenable: FATCA.buildingNum,
                      // ),
                      // SizedBox(
                      //   width: 15,
                      // ),
                      Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            S.of(context).District,
                            style: TextController.BodyText,
                          ),
                          SizedBox(
                            height: 15,
                          ),
                          Container(
                            padding: EdgeInsets.symmetric(horizontal: 10),
                            width: 150,
                            height: 35,
                            alignment: Alignment.centerLeft,
                            decoration: BoxDecoration(
                                color: Colors.white,
                                border:
                                    Border.all(color: ColorSelect.textField)),
                            child: TextFormField(
                              // inputFormatters: [
                              //   FilteringTextInputFormatter.allow(
                              //       RegExp(r'[a-zA-Z ]')),
                              // ],
                              // validator: (value) {
                              //   if (value!.isEmpty) {
                              //     setState(() {
                              //       firstNameEn = true;
                              //     });
                              //   } else {
                              //     setState(() {
                              //       firstNameEn = false;
                              //     });
                              //   }
                              // },
                              controller: district,
                              textAlignVertical: TextAlignVertical.center,
                              style: TextController.BodyText,
                              decoration: InputDecoration(
                                isDense: true,
                                hintText: S.of(context).TypeHere,
                                hintStyle: TextController.labelText,
                                border: InputBorder.none,
                                errorStyle: TextController.inputErrorText,
                              ),
                            ),
                          )
                        ],
                      ),

                      // ValueListenableBuilder(
                      //   builder: (
                      //     BuildContext context,
                      //     String value,
                      //     Widget? child,
                      //   ) {
                      //     return Center(child: Text(value));
                      //   },
                      //   valueListenable: FATCA.postalCode,
                      // ),
                      Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            S.of(context).City,
                            style: TextController.BodyText,
                          ),
                          SizedBox(
                            height: 15,
                          ),
                          Container(
                            padding: EdgeInsets.symmetric(horizontal: 10),
                            width: 150,
                            height: 35,
                            alignment: Alignment.centerLeft,
                            decoration: BoxDecoration(
                                color: Colors.white,
                                border:
                                    Border.all(color: ColorSelect.textField)),
                            child: TextFormField(
                              // inputFormatters: [
                              //   FilteringTextInputFormatter.allow(
                              //       RegExp(r'[a-zA-Z ]')),
                              // ],
                              // validator: (value) {
                              //   if (value!.isEmpty) {
                              //     setState(() {
                              //       firstNameEn = true;
                              //     });
                              //   } else {
                              //     setState(() {
                              //       firstNameEn = false;
                              //     });
                              //   }
                              // },
                              controller: city,
                              textAlignVertical: TextAlignVertical.center,
                              style: TextController.BodyText,
                              decoration: InputDecoration(
                                isDense: true,
                                hintText: S.of(context).TypeHere,
                                hintStyle: TextController.labelText,
                                border: InputBorder.none,
                                errorStyle: TextController.inputErrorText,
                              ),
                            ),
                          )
                        ],
                      ),
                      Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            S.of(context).PostalCode,
                            style: TextController.BodyText,
                          ),
                          SizedBox(
                            height: 15,
                          ),
                          Container(
                            padding: EdgeInsets.symmetric(horizontal: 10),
                            width: 150,
                            height: 35,
                            alignment: Alignment.centerLeft,
                            decoration: BoxDecoration(
                                color: Colors.white,
                                border:
                                    Border.all(color: ColorSelect.textField)),
                            child: TextFormField(
                              // inputFormatters: [
                              //   FilteringTextInputFormatter.allow(
                              //       RegExp(r'[a-zA-Z ]')),
                              // ],
                              // validator: (value) {
                              //   if (value!.isEmpty) {
                              //     setState(() {
                              //       firstNameEn = true;
                              //     });
                              //   } else {
                              //     setState(() {
                              //       firstNameEn = false;
                              //     });
                              //   }
                              // },
                              controller: postal,
                              textAlignVertical: TextAlignVertical.center,
                              style: TextController.BodyText,
                              decoration: InputDecoration(
                                isDense: true,
                                hintText: S.of(context).TypeHere,
                                hintStyle: TextController.labelText,
                                border: InputBorder.none,
                                errorStyle: TextController.inputErrorText,
                              ),
                            ),
                          )
                        ],
                      ),
                      Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            S.of(context).Country,
                            style: TextController.BodyText,
                          ),
                          SizedBox(
                            height: 15,
                          ),
                          Container(
                            padding: EdgeInsets.symmetric(horizontal: 10),
                            width: 150,
                            height: 35,
                            alignment: Alignment.centerLeft,
                            decoration: BoxDecoration(
                                color: Colors.white,
                                border:
                                    Border.all(color: ColorSelect.textField)),
                            child: TextFormField(
                              // inputFormatters: [
                              //   FilteringTextInputFormatter.allow(
                              //       RegExp(r'[a-zA-Z ]')),
                              // ],
                              // validator: (value) {
                              //   if (value!.isEmpty) {
                              //     setState(() {
                              //       firstNameEn = true;
                              //     });
                              //   } else {
                              //     setState(() {
                              //       firstNameEn = false;
                              //     });
                              //   }
                              // },
                              controller: country,
                              textAlignVertical: TextAlignVertical.center,
                              style: TextController.BodyText,
                              decoration: InputDecoration(
                                isDense: true,
                                hintText: S.of(context).TypeHere,
                                hintStyle: TextController.labelText,
                                border: InputBorder.none,
                                errorStyle: TextController.inputErrorText,
                              ),
                            ),
                          )
                        ],
                      ),
                    ],
                  ),
                ),
                SizedBox(
                  height: 15,
                ),
                Padding(
                  padding: EdgeInsets.symmetric(horizontal: 50),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Container(
                        
                        child: Row(
                          mainAxisAlignment: MainAxisAlignment.start,
                          children: [
                            Text(
                              S.of(context).FatcaQ1,
                              style: TextController.BodyText,
                            ),
                            Row(
                              children: [
                                Text(
                                  S.of(context).Yes,
                                  style: TextController.BodyText,
                                ),
                                Radio<String>(
                                  value: "Yes",
                                  groupValue: sectionAque,
                                  onChanged: (value) {
                                    setState(() {
                                      sectionAque = value!; //<-- change this
                                    });
                                  },
                                ),
                                Text(
                                  S.of(context).No,
                                  style: TextController.BodyText,
                                ),
                                Radio<String>(
                                  value: "No",
                                  groupValue: sectionAque,
                                  onChanged: (value) {
                                    setState(() {
                                      sectionAque = value!; //<-- change this
                                    });
                                  },
                                ),
                              ],
                            ),
                          ],
                        ),
                      ),
                      if (radio1error)
                        Container(
                          margin: EdgeInsets.only(top: 5),
                          child: Text(
                            "This field is required.",
                            style: TextController.errorText,
                          ),
                        ),
                    ],
                  ),
                ),
                if (sectionAque == "Yes")
                  Column(
                    children: [
                      Container(
                        padding: EdgeInsets.symmetric(horizontal: 50),
                        child: Row(
                          mainAxisAlignment: MainAxisAlignment.start,
                          children: [
                            Container(
                              margin: EdgeInsets.symmetric(vertical: 20),
                              child: Text(
                                S.of(context).IfYesPleasecompletesectionB,
                                style: TextController.BodyHeadingText,
                              ),
                            ),
                          ],
                        ),
                      ),
                      Container(
                        width: double.infinity,
                        height: 45,
                        decoration: BoxDecoration(
                          color: ColorSelect.east_grey,
                          border: Border.all(
                            color: ColorSelect.tabBorderColor,
                          ),
                        ),
                        child: Padding(
                          padding: EdgeInsets.only(left: 50),
                          child: Align(
                              alignment: Alignment.centerLeft,
                              child: Text(
                                S.of(context).SectionBTaxResidencyInformation,
                                style: TextController.SubHeadingText,
                              )),
                        ),
                      ),
                      Padding(
                        padding: const EdgeInsets.symmetric(
                            horizontal: 50, vertical: 20),
                        child: Align(
                            alignment: Alignment.centerLeft,
                            child: Text(
                              "Please specify your Country(ies)/Jurisdiction(s) of Residence for Tax Purposes including Taxpayer Identification number.If you are a Tax Resident of the United States of America (USA), please also complete Section C",
                              style: TextController.BodyTextCC,
                            )),
                      ),
                      Container(
                        width: 900,
                        alignment: Alignment.center,
                        child: Column(
                          children: [
                            Table(
                              border: TableBorder.all(
                                  color: ColorSelect.tabBorderColor),
                              defaultVerticalAlignment:
                                  TableCellVerticalAlignment.middle,
                              columnWidths: {
                                0: FlexColumnWidth(4),
                                1: FlexColumnWidth(4),
                                2: FlexColumnWidth(4),
                                // 0: FixedColumnWidth(300),
                                // 1: FixedColumnWidth(300),
                                // 2: FixedColumnWidth(300),
                              },
                              children: [
                                TableRow(children: [
                                  Padding(
                                    padding: const EdgeInsets.only(left: 10),
                                    child: Container(
                                        height: 70,
                                        color: ColorSelect.east_grey,
                                        child: Align(
                                          alignment: Alignment.centerLeft,
                                          child: Text(
                                            S
                                                .of(context)
                                                .CountryJurisdictionAbbreviationsarenotAllowed,
                                            style: TextController.InvACC,
                                          ),
                                        )),
                                  ),
                                  Container(
                                      height: 70,
                                      color: ColorSelect.east_grey,
                                      child: Padding(
                                        padding:
                                            const EdgeInsets.only(left: 10),
                                        child: Align(
                                          alignment: Alignment.centerLeft,
                                          child: Text(
                                            S
                                                .of(context)
                                                .TaxpayerIdentification,
                                            style: TextController.InvACC,
                                            maxLines: 3,
                                          ),
                                        ),
                                      )),
                                  Container(
                                      height: 70,
                                      color: ColorSelect.east_grey,
                                      child: Padding(
                                        padding:
                                            const EdgeInsets.only(left: 10),
                                        child: Align(
                                          alignment: Alignment.centerLeft,
                                          child: Text(
                                            S
                                                .of(context)
                                                .IfnoTINavailableenterReason,
                                            style: TextController.InvACC,
                                            maxLines: 3,
                                          ),
                                        ),
                                      )),
                                ]),
                                TableRow(children: [
                                  Container(
                                    // height: 70,
                                    // child: TextFormField(
                                    //   controller: countryJr1,
                                    //   maxLines: null,
                                    //   keyboardType: TextInputType.multiline,
                                    //   decoration:
                                    //       InputDecoration(border: InputBorder.none),
                                    // ),
                                    child: TypeAheadField(
                                      textFieldConfiguration:
                                          TextFieldConfiguration(
                                              // onTap: () {
                                              //   setState(() {
                                              //     citizenshipError = false;
                                              //   });
                                              // },
                                              textAlign: TextAlign.center,
                                              controller: countryJr1,
                                              maxLines: null,
                                              style: TextController.BodyText,
                                              decoration: InputDecoration(
                                                enabledBorder: InputBorder.none,
                                                hintStyle:
                                                    TextController.labelText,
                                              )),
                                      suggestionsCallback: (pattern) {
                                        // Return a filtered list of suggestions based on the search pattern.
                                        return citizenship
                                            .where((item) => item
                                                .toLowerCase()
                                                .contains(
                                                    pattern.toLowerCase()))
                                            .toList();
                                      },
                                      itemBuilder: (context, suggestion) {
                                        return ListTile(
                                          title: Text(
                                            suggestion,
                                            style: TextController.BodyText,
                                          ),
                                        );
                                      },
                                      onSuggestionSelected: (suggestion) {
                                        // Update the selected item when a suggestion is selected.
                                        setState(() {
                                          _selectedItem = suggestion;
                                          countryJr1.text = suggestion;
                                        });
                                      },
                                    ),
                                  ),
                                  Container(
                                    // height: 70,
                                    child: TextFormField(
                                      controller: tin1,
                                      maxLines: null,
                                      textAlign: TextAlign.center,
                                      style: TextController.BodyText,
                                      keyboardType: TextInputType.multiline,
                                      decoration: InputDecoration(
                                          border: InputBorder.none),
                                    ),
                                  ),
                                  // Container(
                                  //   height: 70,
                                  //   child: TextFormField(
                                  //     controller: notin1,
                                  //     maxLines: null,
                                  //     textAlign: TextAlign.center,
                                  //     style: TextController.BodyText,
                                  //     keyboardType: TextInputType.multiline,
                                  //     decoration: InputDecoration(
                                  //         border: InputBorder.none),
                                  //   ),
                                  // ),
                                  Container(
                                    // height: 70,
                                    child: Column(
                                      crossAxisAlignment:
                                          CrossAxisAlignment.center,
                                      mainAxisAlignment:
                                          MainAxisAlignment.center,
                                      children: [
                                        Row(
                                          mainAxisAlignment:
                                              MainAxisAlignment.center,
                                          children: [
                                            Container(
                                              width: 270,
                                              height: 35,
                                              padding: EdgeInsets.symmetric(
                                                horizontal: 10,
                                              ),
                                              alignment: Alignment.centerLeft,
                                              decoration: BoxDecoration(
                                                  color: Colors.white,
                                                  border: Border.all(
                                                      color: ColorSelect
                                                          .textField)),
                                              child: DropdownButton(
                                                hint: Text(
                                                  S.of(context).SelectHere,
                                                  style:
                                                      TextController.labelText,
                                                ),
                                                value: ifnotin1.isNotEmpty
                                                    ? ifnotin1
                                                    : null,
                                                isExpanded: true,
                                                underline: Container(),
                                                iconEnabledColor:
                                                    ColorSelect.east_dark_blue,
                                                items:
                                                    NoTIN.map((String items) {
                                                  return DropdownMenuItem(
                                                    value: items,
                                                    child: Text(items,
                                                        style: TextController
                                                            .BodyText),
                                                  );
                                                }).toList(),
                                                onChanged: (String? newValue) {
                                                  setState(() {
                                                    ifnotin1Error = false;
                                                    ifnotin1 = newValue!;
                                                  });
                                                },
                                              ),
                                            ),
                                          ],
                                        ),
                                        if (ifnotin1Error)
                                          Container(
                                            margin: EdgeInsets.only(top: 5),
                                            child: Text(
                                              "Select any option",
                                              style: TextController.errorText,
                                            ),
                                          ),

                                        // if (selectedValue2 == "b1")
                                        //   Container(
                                        //     margin: EdgeInsets.symmetric(
                                        //         vertical: 10),
                                        //     child: Column(
                                        //       mainAxisAlignment:
                                        //           MainAxisAlignment
                                        //               .spaceBetween,
                                        //       children: [
                                        //         Container(
                                        //           padding: EdgeInsets.symmetric(
                                        //               horizontal: 10),
                                        //           child: Row(
                                        //             mainAxisAlignment:
                                        //                 MainAxisAlignment
                                        //                     .spaceBetween,
                                        //             children: [
                                        //               Text(
                                        //                 S.of(context).Country1,
                                        //                 style: TextController
                                        //                     .BodyText,
                                        //               ),
                                        //               SizedBox(
                                        //                 width: 10,
                                        //               ),
                                        //               Container(
                                        //                 padding: EdgeInsets
                                        //                     .symmetric(
                                        //                         horizontal: 10),
                                        //                 width: 180,
                                        //                 height: 35,
                                        //                 alignment: Alignment
                                        //                     .centerLeft,
                                        //                 decoration: BoxDecoration(
                                        //                     color: Colors.white,
                                        //                     border: Border.all(
                                        //                         color: ColorSelect
                                        //                             .textField)),
                                        //                 child: TypeAheadField(
                                        //                   textFieldConfiguration:
                                        //                       TextFieldConfiguration(
                                        //                           // onTap: () {
                                        //                           //   setState(() {
                                        //                           //     citizenshipError = false;
                                        //                           //   });
                                        //                           // },
                                        //                           textAlignVertical:
                                        //                               TextAlignVertical
                                        //                                   .center,
                                        //                           controller:
                                        //                               _typeAheadController,
                                        //                           style: TextController
                                        //                               .BodyText,
                                        //                           decoration: InputDecoration(
                                        //                               isDense:
                                        //                                   true,
                                        //                               enabledBorder:
                                        //                                   InputBorder
                                        //                                       .none,
                                        //                               hintStyle:
                                        //                                   TextController
                                        //                                       .labelText,
                                        //                               hintText: S
                                        //                                   .of(context)
                                        //                                   .Citizenship)),
                                        //                   suggestionsCallback:
                                        //                       (pattern) {
                                        //                     // Return a filtered list of suggestions based on the search pattern.
                                        //                     return citizenship
                                        //                         .where((item) => item
                                        //                             .toLowerCase()
                                        //                             .contains(
                                        //                                 pattern
                                        //                                     .toLowerCase()))
                                        //                         .toList();
                                        //                   },
                                        //                   itemBuilder: (context,
                                        //                       suggestion) {
                                        //                     return ListTile(
                                        //                       title: Text(
                                        //                         suggestion,
                                        //                         style:
                                        //                             TextController
                                        //                                 .BodyText,
                                        //                       ),
                                        //                     );
                                        //                   },
                                        //                   onSuggestionSelected:
                                        //                       (suggestion) {
                                        //                     // Update the selected item when a suggestion is selected.
                                        //                     setState(() {
                                        //                       _selectedItem =
                                        //                           suggestion;
                                        //                       _typeAheadController
                                        //                               .text =
                                        //                           suggestion;
                                        //                     });
                                        //                   },
                                        //                 ),
                                        //               ),
                                        //             ],
                                        //           ),
                                        //         ),
                                        //         SizedBox(
                                        //           height: 10,
                                        //         ),
                                        //         Container(
                                        //           padding: EdgeInsets.symmetric(
                                        //               horizontal: 10),
                                        //           child: Row(
                                        //             mainAxisAlignment:
                                        //                 MainAxisAlignment
                                        //                     .spaceBetween,
                                        //             children: [
                                        //               Text(
                                        //                 S.of(context).Country2,
                                        //                 style: TextController
                                        //                     .BodyText,
                                        //               ),
                                        //               SizedBox(
                                        //                 height: 10,
                                        //               ),
                                        //               Container(
                                        //                 padding: EdgeInsets
                                        //                     .symmetric(
                                        //                         horizontal: 10),
                                        //                 width: 180,
                                        //                 height: 35,
                                        //                 alignment: Alignment
                                        //                     .centerLeft,
                                        //                 decoration: BoxDecoration(
                                        //                     color: Colors.white,
                                        //                     border: Border.all(
                                        //                         color: ColorSelect
                                        //                             .textField)),
                                        //                 child: TypeAheadField(
                                        //                   textFieldConfiguration:
                                        //                       TextFieldConfiguration(
                                        //                           textAlignVertical:
                                        //                               TextAlignVertical
                                        //                                   .center,
                                        //                           // onTap: () {

                                        //                           //   setState(() {
                                        //                           //     citizenshipError = false;
                                        //                           //   });
                                        //                           // },
                                        //                           controller:
                                        //                               _typeAheadController2,
                                        //                           style: TextController
                                        //                               .BodyText,
                                        //                           decoration: InputDecoration(
                                        //                               isDense:
                                        //                                   true,
                                        //                               enabledBorder:
                                        //                                   InputBorder
                                        //                                       .none,
                                        //                               hintStyle:
                                        //                                   TextController
                                        //                                       .labelText,
                                        //                               hintText: S
                                        //                                   .of(context)
                                        //                                   .Citizenship)),
                                        //                   suggestionsCallback:
                                        //                       (pattern) {
                                        //                     // Return a filtered list of suggestions based on the search pattern.
                                        //                     return citizenship
                                        //                         .where((item) => item
                                        //                             .toLowerCase()
                                        //                             .contains(
                                        //                                 pattern
                                        //                                     .toLowerCase()))
                                        //                         .toList();
                                        //                   },
                                        //                   itemBuilder: (context,
                                        //                       suggestion) {
                                        //                     return ListTile(
                                        //                       title: Text(
                                        //                         suggestion,
                                        //                         style:
                                        //                             TextController
                                        //                                 .BodyText,
                                        //                       ),
                                        //                     );
                                        //                   },
                                        //                   onSuggestionSelected:
                                        //                       (suggestion) {
                                        //                     // Update the selected item when a suggestion is selected.
                                        //                     setState(() {
                                        //                       _selectedItem2 =
                                        //                           suggestion;
                                        //                       _typeAheadController2
                                        //                               .text =
                                        //                           suggestion;
                                        //                     });
                                        //                   },
                                        //                 ),
                                        //               ),
                                        //             ],
                                        //           ),
                                        //         ),
                                        //         SizedBox(
                                        //           height: 10,
                                        //         ),
                                        //         Container(
                                        //           padding: EdgeInsets.symmetric(
                                        //               horizontal: 10),
                                        //           child: Row(
                                        //             mainAxisAlignment:
                                        //                 MainAxisAlignment
                                        //                     .spaceBetween,
                                        //             children: [
                                        //               Text(
                                        //                 S.of(context).Country3,
                                        //                 style: TextController
                                        //                     .BodyText,
                                        //               ),
                                        //               SizedBox(
                                        //                 height: 10,
                                        //               ),
                                        //               Container(
                                        //                 padding: EdgeInsets
                                        //                     .symmetric(
                                        //                         horizontal: 10),
                                        //                 width: 180,
                                        //                 height: 35,
                                        //                 alignment: Alignment
                                        //                     .centerLeft,
                                        //                 decoration: BoxDecoration(
                                        //                     color: Colors.white,
                                        //                     border: Border.all(
                                        //                         color: ColorSelect
                                        //                             .textField)),
                                        //                 child: TypeAheadField(
                                        //                   textFieldConfiguration:
                                        //                       TextFieldConfiguration(
                                        //                           textAlignVertical:
                                        //                               TextAlignVertical
                                        //                                   .center,
                                        //                           // onTap: () {
                                        //                           //   setState(() {
                                        //                           //     citizenshipError = false;
                                        //                           //   });
                                        //                           // },
                                        //                           controller:
                                        //                               _typeAheadController3,
                                        //                           style: TextController
                                        //                               .BodyText,
                                        //                           decoration: InputDecoration(
                                        //                               isDense:
                                        //                                   true,
                                        //                               enabledBorder:
                                        //                                   InputBorder
                                        //                                       .none,
                                        //                               hintStyle:
                                        //                                   TextController
                                        //                                       .labelText,
                                        //                               hintText: S
                                        //                                   .of(context)
                                        //                                   .Citizenship)),
                                        //                   suggestionsCallback:
                                        //                       (pattern) {
                                        //                     // Return a filtered list of suggestions based on the search pattern.
                                        //                     return citizenship
                                        //                         .where((item) => item
                                        //                             .toLowerCase()
                                        //                             .contains(
                                        //                                 pattern
                                        //                                     .toLowerCase()))
                                        //                         .toList();
                                        //                   },
                                        //                   itemBuilder: (context,
                                        //                       suggestion) {
                                        //                     return ListTile(
                                        //                       title: Text(
                                        //                         suggestion,
                                        //                         style:
                                        //                             TextController
                                        //                                 .BodyText,
                                        //                       ),
                                        //                     );
                                        //                   },
                                        //                   onSuggestionSelected:
                                        //                       (suggestion) {
                                        //                     // Update the selected item when a suggestion is selected.
                                        //                     setState(() {
                                        //                       _selectedItem3 =
                                        //                           suggestion;
                                        //                       _typeAheadController3
                                        //                               .text =
                                        //                           suggestion;
                                        //                     });
                                        //                   },
                                        //                 ),
                                        //               ),
                                        //             ],
                                        //           ),
                                        //         )
                                        //       ],
                                        //     ),
                                        //   ),
                                      ],
                                    ),
                                  ),
                                ]),
                                TableRow(
                                  children: [
                                    Container(
                                      child: TypeAheadField(
                                        textFieldConfiguration:
                                            TextFieldConfiguration(
                                                // onTap: () {
                                                //   setState(() {
                                                //     citizenshipError = false;
                                                //   });
                                                // },
                                                textAlign: TextAlign.center,
                                                controller: countryJr2,
                                                maxLines: null,
                                                style: TextController.BodyText,
                                                decoration: InputDecoration(
                                                  enabledBorder:
                                                      InputBorder.none,
                                                  hintStyle:
                                                      TextController.labelText,
                                                )),
                                        suggestionsCallback: (pattern) {
                                          // Return a filtered list of suggestions based on the search pattern.
                                          return citizenship
                                              .where((item) => item
                                                  .toLowerCase()
                                                  .contains(
                                                      pattern.toLowerCase()))
                                              .toList();
                                        },
                                        itemBuilder: (context, suggestion) {
                                          return ListTile(
                                            title: Text(
                                              suggestion,
                                              style: TextController.BodyText,
                                            ),
                                          );
                                        },
                                        onSuggestionSelected: (suggestion) {
                                          // Update the selected item when a suggestion is selected.
                                          setState(() {
                                            _selectedItem = suggestion;
                                            countryJr2.text = suggestion;
                                          });
                                        },
                                      ),
                                    ),
                                    Container(
                                      child: TextFormField(
                                        controller: tin2,
                                        maxLines: null,
                                        textAlign: TextAlign.center,
                                        style: TextController.BodyText,
                                        keyboardType: TextInputType.multiline,
                                        decoration: InputDecoration(
                                            border: InputBorder.none),
                                      ),
                                    ),
                                    Container(
                                      child: Column(
                                        mainAxisAlignment:
                                            MainAxisAlignment.center,
                                        crossAxisAlignment:
                                            CrossAxisAlignment.center,
                                        children: [
                                          Row(
                                            mainAxisAlignment:
                                                MainAxisAlignment.center,
                                            children: [
                                              Container(
                                                width: 270,
                                                height: 35,
                                                padding: EdgeInsets.symmetric(
                                                  horizontal: 10,
                                                ),
                                                alignment: Alignment.centerLeft,
                                                decoration: BoxDecoration(
                                                    color: Colors.white,
                                                    border: Border.all(
                                                        color: ColorSelect
                                                            .textField)),
                                                child: DropdownButton(
                                                  hint: Text(
                                                    S.of(context).SelectHere,
                                                    style: TextController
                                                        .labelText,
                                                  ),
                                                  value: ifnotin2.isNotEmpty
                                                      ? ifnotin2
                                                      : null,
                                                  isExpanded: true,
                                                  underline: Container(),
                                                  iconEnabledColor: ColorSelect
                                                      .east_dark_blue,
                                                  items:
                                                      NoTIN.map((String items) {
                                                    return DropdownMenuItem(
                                                      value: items,
                                                      child: Text(items,
                                                          style: TextController
                                                              .BodyText),
                                                    );
                                                  }).toList(),
                                                  onChanged:
                                                      (String? newValue) {
                                                    setState(() {
                                                      ifnotin2Error = false;
                                                      ifnotin2 = newValue!;
                                                    });
                                                  },
                                                ),
                                              ),
                                            ],
                                          ),
                                          if (ifnotin2Error)
                                            Container(
                                              margin: EdgeInsets.only(top: 5),
                                              child: Text(
                                                "Select any option",
                                                style: TextController.errorText,
                                              ),
                                            ),
                                          // if (selectedValue3 == "b2")
                                          //   Container(
                                          //     margin: EdgeInsets.symmetric(
                                          //         vertical: 10),
                                          //     child: Column(
                                          //       mainAxisAlignment:
                                          //           MainAxisAlignment
                                          //               .spaceBetween,
                                          //       children: [
                                          //         Container(
                                          //           padding:
                                          //               EdgeInsets.symmetric(
                                          //                   horizontal: 10),
                                          //           child: Row(
                                          //             mainAxisAlignment:
                                          //                 MainAxisAlignment
                                          //                     .spaceBetween,
                                          //             children: [
                                          //               Text(
                                          //                 S
                                          //                     .of(context)
                                          //                     .Country1,
                                          //                 style: TextController
                                          //                     .BodyText,
                                          //               ),
                                          //               SizedBox(
                                          //                 width: 10,
                                          //               ),
                                          //               Container(
                                          //                 padding: EdgeInsets
                                          //                     .symmetric(
                                          //                         horizontal:
                                          //                             10),
                                          //                 width: 180,
                                          //                 height: 35,
                                          //                 alignment: Alignment
                                          //                     .centerLeft,
                                          //                 decoration: BoxDecoration(
                                          //                     color:
                                          //                         Colors.white,
                                          //                     border: Border.all(
                                          //                         color: ColorSelect
                                          //                             .textField)),
                                          //                 child: TypeAheadField(
                                          //                   textFieldConfiguration:
                                          //                       TextFieldConfiguration(
                                          //                           // onTap: () {
                                          //                           //   setState(() {
                                          //                           //     citizenshipError = false;
                                          //                           //   });
                                          //                           // },
                                          //                           textAlignVertical:
                                          //                               TextAlignVertical
                                          //                                   .center,
                                          //                           controller:
                                          //                               _typeAheadController4,
                                          //                           style: TextController
                                          //                               .BodyText,
                                          //                           decoration: InputDecoration(
                                          //                               isDense:
                                          //                                   true,
                                          //                               enabledBorder:
                                          //                                   InputBorder
                                          //                                       .none,
                                          //                               hintStyle:
                                          //                                   TextController
                                          //                                       .labelText,
                                          //                               hintText: S
                                          //                                   .of(context)
                                          //                                   .Citizenship)),
                                          //                   suggestionsCallback:
                                          //                       (pattern) {
                                          //                     // Return a filtered list of suggestions based on the search pattern.
                                          //                     return citizenship
                                          //                         .where((item) => item
                                          //                             .toLowerCase()
                                          //                             .contains(
                                          //                                 pattern
                                          //                                     .toLowerCase()))
                                          //                         .toList();
                                          //                   },
                                          //                   itemBuilder:
                                          //                       (context,
                                          //                           suggestion) {
                                          //                     return ListTile(
                                          //                       title: Text(
                                          //                         suggestion,
                                          //                         style: TextController
                                          //                             .BodyText,
                                          //                       ),
                                          //                     );
                                          //                   },
                                          //                   onSuggestionSelected:
                                          //                       (suggestion) {
                                          //                     // Update the selected item when a suggestion is selected.
                                          //                     setState(() {
                                          //                       _selectedItem =
                                          //                           suggestion;
                                          //                       _typeAheadController4
                                          //                               .text =
                                          //                           suggestion;
                                          //                     });
                                          //                   },
                                          //                 ),
                                          //               ),
                                          //             ],
                                          //           ),
                                          //         ),
                                          //         SizedBox(
                                          //           height: 10,
                                          //         ),
                                          //         Container(
                                          //           padding:
                                          //               EdgeInsets.symmetric(
                                          //                   horizontal: 10),
                                          //           child: Row(
                                          //             mainAxisAlignment:
                                          //                 MainAxisAlignment
                                          //                     .spaceBetween,
                                          //             children: [
                                          //               Text(
                                          //                 S
                                          //                     .of(context)
                                          //                     .Country2,
                                          //                 style: TextController
                                          //                     .BodyText,
                                          //               ),
                                          //               SizedBox(
                                          //                 height: 10,
                                          //               ),
                                          //               Container(
                                          //                 padding: EdgeInsets
                                          //                     .symmetric(
                                          //                         horizontal:
                                          //                             10),
                                          //                 width: 180,
                                          //                 height: 35,
                                          //                 alignment: Alignment
                                          //                     .centerLeft,
                                          //                 decoration: BoxDecoration(
                                          //                     color:
                                          //                         Colors.white,
                                          //                     border: Border.all(
                                          //                         color: ColorSelect
                                          //                             .textField)),
                                          //                 child: TypeAheadField(
                                          //                   textFieldConfiguration:
                                          //                       TextFieldConfiguration(
                                          //                           textAlignVertical:
                                          //                               TextAlignVertical
                                          //                                   .center,
                                          //                           // onTap: () {

                                          //                           //   setState(() {
                                          //                           //     citizenshipError = false;
                                          //                           //   });
                                          //                           // },
                                          //                           controller:
                                          //                               _typeAheadController5,
                                          //                           style: TextController
                                          //                               .BodyText,
                                          //                           decoration: InputDecoration(
                                          //                               isDense:
                                          //                                   true,
                                          //                               enabledBorder:
                                          //                                   InputBorder
                                          //                                       .none,
                                          //                               hintStyle:
                                          //                                   TextController
                                          //                                       .labelText,
                                          //                               hintText: S
                                          //                                   .of(context)
                                          //                                   .Citizenship)),
                                          //                   suggestionsCallback:
                                          //                       (pattern) {
                                          //                     // Return a filtered list of suggestions based on the search pattern.
                                          //                     return citizenship
                                          //                         .where((item) => item
                                          //                             .toLowerCase()
                                          //                             .contains(
                                          //                                 pattern
                                          //                                     .toLowerCase()))
                                          //                         .toList();
                                          //                   },
                                          //                   itemBuilder:
                                          //                       (context,
                                          //                           suggestion) {
                                          //                     return ListTile(
                                          //                       title: Text(
                                          //                         suggestion,
                                          //                         style: TextController
                                          //                             .BodyText,
                                          //                       ),
                                          //                     );
                                          //                   },
                                          //                   onSuggestionSelected:
                                          //                       (suggestion) {
                                          //                     // Update the selected item when a suggestion is selected.
                                          //                     setState(() {
                                          //                       _selectedItem2 =
                                          //                           suggestion;
                                          //                       _typeAheadController5
                                          //                               .text =
                                          //                           suggestion;
                                          //                     });
                                          //                   },
                                          //                 ),
                                          //               ),
                                          //             ],
                                          //           ),
                                          //         ),
                                          //         SizedBox(
                                          //           height: 10,
                                          //         ),
                                          //         Container(
                                          //           padding:
                                          //               EdgeInsets.symmetric(
                                          //                   horizontal: 10),
                                          //           child: Row(
                                          //             mainAxisAlignment:
                                          //                 MainAxisAlignment
                                          //                     .spaceBetween,
                                          //             children: [
                                          //               Text(
                                          //                 S
                                          //                     .of(context)
                                          //                     .Country3,
                                          //                 style: TextController
                                          //                     .BodyText,
                                          //               ),
                                          //               SizedBox(
                                          //                 height: 10,
                                          //               ),
                                          //               Container(
                                          //                 padding: EdgeInsets
                                          //                     .symmetric(
                                          //                         horizontal:
                                          //                             10),
                                          //                 width: 180,
                                          //                 height: 35,
                                          //                 alignment: Alignment
                                          //                     .centerLeft,
                                          //                 decoration: BoxDecoration(
                                          //                     color:
                                          //                         Colors.white,
                                          //                     border: Border.all(
                                          //                         color: ColorSelect
                                          //                             .textField)),
                                          //                 child: TypeAheadField(
                                          //                   textFieldConfiguration:
                                          //                       TextFieldConfiguration(
                                          //                           textAlignVertical:
                                          //                               TextAlignVertical
                                          //                                   .center,
                                          //                           // onTap: () {
                                          //                           //   setState(() {
                                          //                           //     citizenshipError = false;
                                          //                           //   });
                                          //                           // },
                                          //                           controller:
                                          //                               _typeAheadController6,
                                          //                           style: TextController
                                          //                               .BodyText,
                                          //                           decoration: InputDecoration(
                                          //                               isDense:
                                          //                                   true,
                                          //                               enabledBorder:
                                          //                                   InputBorder
                                          //                                       .none,
                                          //                               hintStyle:
                                          //                                   TextController
                                          //                                       .labelText,
                                          //                               hintText: S
                                          //                                   .of(context)
                                          //                                   .Citizenship)),
                                          //                   suggestionsCallback:
                                          //                       (pattern) {
                                          //                     // Return a filtered list of suggestions based on the search pattern.
                                          //                     return citizenship
                                          //                         .where((item) => item
                                          //                             .toLowerCase()
                                          //                             .contains(
                                          //                                 pattern
                                          //                                     .toLowerCase()))
                                          //                         .toList();
                                          //                   },
                                          //                   itemBuilder:
                                          //                       (context,
                                          //                           suggestion) {
                                          //                     return ListTile(
                                          //                       title: Text(
                                          //                         suggestion,
                                          //                         style: TextController
                                          //                             .BodyText,
                                          //                       ),
                                          //                     );
                                          //                   },
                                          //                   onSuggestionSelected:
                                          //                       (suggestion) {
                                          //                     // Update the selected item when a suggestion is selected.
                                          //                     setState(() {
                                          //                       _selectedItem3 =
                                          //                           suggestion;
                                          //                       _typeAheadController6
                                          //                               .text =
                                          //                           suggestion;
                                          //                     });
                                          //                   },
                                          //                 ),
                                          //               ),
                                          //             ],
                                          //           ),
                                          //         )
                                          //       ],
                                          //     ),
                                          //   ),
                                        ],
                                      ),
                                    ),
                                    // Container(
                                    //   height: 70,
                                    //   child: TextFormField(
                                    //     controller: notin2,
                                    //     maxLines: null,
                                    //     textAlign: TextAlign.center,
                                    //     style: TextController.BodyText,
                                    //     keyboardType: TextInputType.multiline,
                                    //     decoration: InputDecoration(
                                    //         border: InputBorder.none),
                                    //   ),
                                    // ),
                                  ],
                                ),
                                TableRow(
                                  children: [
                                    Container(
                                      child: TypeAheadField(
                                        textFieldConfiguration:
                                            TextFieldConfiguration(
                                                // onTap: () {
                                                //   setState(() {
                                                //     citizenshipError = false;
                                                //   });
                                                // },
                                                controller: countryJr3,
                                                maxLines: null,
                                                textAlign: TextAlign.center,
                                                style: TextController.BodyText,
                                                decoration: InputDecoration(
                                                  enabledBorder:
                                                      InputBorder.none,
                                                  hintStyle:
                                                      TextController.labelText,
                                                )),
                                        suggestionsCallback: (pattern) {
                                          // Return a filtered list of suggestions based on the search pattern.
                                          return citizenship
                                              .where((item) => item
                                                  .toLowerCase()
                                                  .contains(
                                                      pattern.toLowerCase()))
                                              .toList();
                                        },
                                        itemBuilder: (context, suggestion) {
                                          return ListTile(
                                            title: Text(
                                              suggestion,
                                              style: TextController.BodyText,
                                            ),
                                          );
                                        },
                                        onSuggestionSelected: (suggestion) {
                                          // Update the selected item when a suggestion is selected.
                                          setState(() {
                                            _selectedItem = suggestion;
                                            countryJr3.text = suggestion;
                                          });
                                        },
                                      ),
                                    ),
                                    Container(
                                      child: TextFormField(
                                        controller: tin3,
                                        maxLines: null,
                                        textAlign: TextAlign.center,
                                        style: TextController.BodyText,
                                        keyboardType: TextInputType.multiline,
                                        decoration: InputDecoration(
                                            border: InputBorder.none),
                                      ),
                                    ),
                                    Container(
                                      child: Column(
                                        mainAxisAlignment:
                                            MainAxisAlignment.center,
                                        crossAxisAlignment:
                                            CrossAxisAlignment.center,
                                        children: [
                                          Row(
                                            mainAxisAlignment:
                                                MainAxisAlignment.center,
                                            children: [
                                              Container(
                                                width: 270,
                                                height: 35,
                                                padding: EdgeInsets.symmetric(
                                                  horizontal: 10,
                                                ),
                                                alignment: Alignment.centerLeft,
                                                decoration: BoxDecoration(
                                                    color: Colors.white,
                                                    border: Border.all(
                                                        color: ColorSelect
                                                            .textField)),
                                                child: DropdownButton(
                                                  hint: Text(
                                                    S.of(context).SelectHere,
                                                    style: TextController
                                                        .labelText,
                                                  ),
                                                  value: ifnotin3.isNotEmpty
                                                      ? ifnotin3
                                                      : null,
                                                  isExpanded: true,
                                                  underline: Container(),
                                                  iconEnabledColor: ColorSelect
                                                      .east_dark_blue,
                                                  items:
                                                      NoTIN.map((String items) {
                                                    return DropdownMenuItem(
                                                      value: items,
                                                      child: Text(items,
                                                          style: TextController
                                                              .BodyText),
                                                    );
                                                  }).toList(),
                                                  onChanged:
                                                      (String? newValue) {
                                                    setState(() {
                                                      ifnotin3Error = false;
                                                      ifnotin3 = newValue!;
                                                    });
                                                  },
                                                ),
                                              ),
                                            ],
                                          ),
                                          if (ifnotin3Error)
                                            Container(
                                              margin: EdgeInsets.only(top: 5),
                                              child: Text(
                                                "Select any option",
                                                style: TextController.errorText,
                                              ),
                                            ),
                                          // if (selectedValue4 == "b3")
                                          //   Container(
                                          //     margin: EdgeInsets.symmetric(
                                          //         vertical: 10),
                                          //     child: Column(
                                          //       mainAxisAlignment:
                                          //           MainAxisAlignment
                                          //               .spaceBetween,
                                          //       children: [
                                          //         Container(
                                          //           padding:
                                          //               EdgeInsets.symmetric(
                                          //                   horizontal: 10),
                                          //           child: Row(
                                          //             mainAxisAlignment:
                                          //                 MainAxisAlignment
                                          //                     .spaceBetween,
                                          //             children: [
                                          //               Text(
                                          //                 S
                                          //                     .of(context)
                                          //                     .Country1,
                                          //                 style: TextController
                                          //                     .BodyText,
                                          //               ),
                                          //               SizedBox(
                                          //                 width: 10,
                                          //               ),
                                          //               Container(
                                          //                 padding: EdgeInsets
                                          //                     .symmetric(
                                          //                         horizontal:
                                          //                             10),
                                          //                 width: 180,
                                          //                 height: 35,
                                          //                 alignment: Alignment
                                          //                     .centerLeft,
                                          //                 decoration: BoxDecoration(
                                          //                     color:
                                          //                         Colors.white,
                                          //                     border: Border.all(
                                          //                         color: ColorSelect
                                          //                             .textField)),
                                          //                 child: TypeAheadField(
                                          //                   textFieldConfiguration:
                                          //                       TextFieldConfiguration(
                                          //                           // onTap: () {
                                          //                           //   setState(() {
                                          //                           //     citizenshipError = false;
                                          //                           //   });
                                          //                           // },
                                          //                           textAlignVertical:
                                          //                               TextAlignVertical
                                          //                                   .center,
                                          //                           controller:
                                          //                               _typeAheadController7,
                                          //                           style: TextController
                                          //                               .BodyText,
                                          //                           decoration: InputDecoration(
                                          //                               isDense:
                                          //                                   true,
                                          //                               enabledBorder:
                                          //                                   InputBorder
                                          //                                       .none,
                                          //                               hintStyle:
                                          //                                   TextController
                                          //                                       .labelText,
                                          //                               hintText: S
                                          //                                   .of(context)
                                          //                                   .Citizenship)),
                                          //                   suggestionsCallback:
                                          //                       (pattern) {
                                          //                     // Return a filtered list of suggestions based on the search pattern.
                                          //                     return citizenship
                                          //                         .where((item) => item
                                          //                             .toLowerCase()
                                          //                             .contains(
                                          //                                 pattern
                                          //                                     .toLowerCase()))
                                          //                         .toList();
                                          //                   },
                                          //                   itemBuilder:
                                          //                       (context,
                                          //                           suggestion) {
                                          //                     return ListTile(
                                          //                       title: Text(
                                          //                         suggestion,
                                          //                         style: TextController
                                          //                             .BodyText,
                                          //                       ),
                                          //                     );
                                          //                   },
                                          //                   onSuggestionSelected:
                                          //                       (suggestion) {
                                          //                     // Update the selected item when a suggestion is selected.
                                          //                     setState(() {
                                          //                       _selectedItem =
                                          //                           suggestion;
                                          //                       _typeAheadController7
                                          //                               .text =
                                          //                           suggestion;
                                          //                     });
                                          //                   },
                                          //                 ),
                                          //               ),
                                          //             ],
                                          //           ),
                                          //         ),
                                          //         SizedBox(
                                          //           height: 10,
                                          //         ),
                                          //         Container(
                                          //           padding:
                                          //               EdgeInsets.symmetric(
                                          //                   horizontal: 10),
                                          //           child: Row(
                                          //             mainAxisAlignment:
                                          //                 MainAxisAlignment
                                          //                     .spaceBetween,
                                          //             children: [
                                          //               Text(
                                          //                 S
                                          //                     .of(context)
                                          //                     .Country2,
                                          //                 style: TextController
                                          //                     .BodyText,
                                          //               ),
                                          //               SizedBox(
                                          //                 height: 10,
                                          //               ),
                                          //               Container(
                                          //                 padding: EdgeInsets
                                          //                     .symmetric(
                                          //                         horizontal:
                                          //                             10),
                                          //                 width: 180,
                                          //                 height: 35,
                                          //                 alignment: Alignment
                                          //                     .centerLeft,
                                          //                 decoration: BoxDecoration(
                                          //                     color:
                                          //                         Colors.white,
                                          //                     border: Border.all(
                                          //                         color: ColorSelect
                                          //                             .textField)),
                                          //                 child: TypeAheadField(
                                          //                   textFieldConfiguration:
                                          //                       TextFieldConfiguration(
                                          //                           textAlignVertical:
                                          //                               TextAlignVertical
                                          //                                   .center,
                                          //                           // onTap: () {

                                          //                           //   setState(() {
                                          //                           //     citizenshipError = false;
                                          //                           //   });
                                          //                           // },
                                          //                           controller:
                                          //                               _typeAheadController8,
                                          //                           style: TextController
                                          //                               .BodyText,
                                          //                           decoration: InputDecoration(
                                          //                               isDense:
                                          //                                   true,
                                          //                               enabledBorder:
                                          //                                   InputBorder
                                          //                                       .none,
                                          //                               hintStyle:
                                          //                                   TextController
                                          //                                       .labelText,
                                          //                               hintText: S
                                          //                                   .of(context)
                                          //                                   .Citizenship)),
                                          //                   suggestionsCallback:
                                          //                       (pattern) {
                                          //                     // Return a filtered list of suggestions based on the search pattern.
                                          //                     return citizenship
                                          //                         .where((item) => item
                                          //                             .toLowerCase()
                                          //                             .contains(
                                          //                                 pattern
                                          //                                     .toLowerCase()))
                                          //                         .toList();
                                          //                   },
                                          //                   itemBuilder:
                                          //                       (context,
                                          //                           suggestion) {
                                          //                     return ListTile(
                                          //                       title: Text(
                                          //                         suggestion,
                                          //                         style: TextController
                                          //                             .BodyText,
                                          //                       ),
                                          //                     );
                                          //                   },
                                          //                   onSuggestionSelected:
                                          //                       (suggestion) {
                                          //                     // Update the selected item when a suggestion is selected.
                                          //                     setState(() {
                                          //                       _selectedItem2 =
                                          //                           suggestion;
                                          //                       _typeAheadController8
                                          //                               .text =
                                          //                           suggestion;
                                          //                     });
                                          //                   },
                                          //                 ),
                                          //               ),
                                          //             ],
                                          //           ),
                                          //         ),
                                          //         SizedBox(
                                          //           height: 10,
                                          //         ),
                                          //         Container(
                                          //           padding:
                                          //               EdgeInsets.symmetric(
                                          //                   horizontal: 10),
                                          //           child: Row(
                                          //             mainAxisAlignment:
                                          //                 MainAxisAlignment
                                          //                     .spaceBetween,
                                          //             children: [
                                          //               Text(
                                          //                 S
                                          //                     .of(context)
                                          //                     .Country3,
                                          //                 style: TextController
                                          //                     .BodyText,
                                          //               ),
                                          //               SizedBox(
                                          //                 height: 10,
                                          //               ),
                                          //               Container(
                                          //                 padding: EdgeInsets
                                          //                     .symmetric(
                                          //                         horizontal:
                                          //                             10),
                                          //                 width: 180,
                                          //                 height: 35,
                                          //                 alignment: Alignment
                                          //                     .centerLeft,
                                          //                 decoration: BoxDecoration(
                                          //                     color:
                                          //                         Colors.white,
                                          //                     border: Border.all(
                                          //                         color: ColorSelect
                                          //                             .textField)),
                                          //                 child: TypeAheadField(
                                          //                   textFieldConfiguration:
                                          //                       TextFieldConfiguration(
                                          //                           textAlignVertical:
                                          //                               TextAlignVertical
                                          //                                   .center,
                                          //                           // onTap: () {
                                          //                           //   setState(() {
                                          //                           //     citizenshipError = false;
                                          //                           //   });
                                          //                           // },
                                          //                           controller:
                                          //                               _typeAheadController9,
                                          //                           style: TextController
                                          //                               .BodyText,
                                          //                           decoration: InputDecoration(
                                          //                               isDense:
                                          //                                   true,
                                          //                               enabledBorder:
                                          //                                   InputBorder
                                          //                                       .none,
                                          //                               hintStyle:
                                          //                                   TextController
                                          //                                       .labelText,
                                          //                               hintText: S
                                          //                                   .of(context)
                                          //                                   .Citizenship)),
                                          //                   suggestionsCallback:
                                          //                       (pattern) {
                                          //                     // Return a filtered list of suggestions based on the search pattern.
                                          //                     return citizenship
                                          //                         .where((item) => item
                                          //                             .toLowerCase()
                                          //                             .contains(
                                          //                                 pattern
                                          //                                     .toLowerCase()))
                                          //                         .toList();
                                          //                   },
                                          //                   itemBuilder:
                                          //                       (context,
                                          //                           suggestion) {
                                          //                     return ListTile(
                                          //                       title: Text(
                                          //                         suggestion,
                                          //                         style: TextController
                                          //                             .BodyText,
                                          //                       ),
                                          //                     );
                                          //                   },
                                          //                   onSuggestionSelected:
                                          //                       (suggestion) {
                                          //                     // Update the selected item when a suggestion is selected.
                                          //                     setState(() {
                                          //                       _selectedItem3 =
                                          //                           suggestion;
                                          //                       _typeAheadController9
                                          //                               .text =
                                          //                           suggestion;
                                          //                     });
                                          //                   },
                                          //                 ),
                                          //               ),
                                          //             ],
                                          //           ),
                                          //         )
                                          //       ],
                                          //     ),
                                          //   ),
                                        ],
                                      ),
                                    ),
                                    // Container(
                                    //   height: 70,
                                    //   child: TextFormField(
                                    //     controller: notin3,
                                    //     maxLines: null,
                                    //     textAlign: TextAlign.center,
                                    //     style: TextController.BodyText,
                                    //     keyboardType: TextInputType.multiline,
                                    //     decoration: InputDecoration(
                                    //         border: InputBorder.none),
                                    //   ),
                                    // ),
                                  ],
                                ),
                              ],
                            ),
                            if (tableError)
                              Container(
                                margin: EdgeInsets.all(10),
                                child: Text(
                                  "Enter Details",
                                  style: TextController.errorText,
                                ),
                              ),
                          ],
                        ),
                      ),
                      SizedBox(
                        height: 20,
                      ),
                      Padding(
                        padding: const EdgeInsets.symmetric(
                            horizontal: 50, vertical: 20),
                        child: Column(
                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                          children: [
                            Align(
                                alignment: Alignment.centerLeft,
                                child: Text(
                                  S.of(context).chooseoneofthefollowingreasons,
                                  style: TextController.BodyHeadingText,
                                )),
                            Column(
                              mainAxisAlignment: MainAxisAlignment.spaceBetween,
                              children: [
                                Row(
                                  children: [
                                    // Radio<String>(
                                    //   value: "Option1",
                                    //   groupValue: selectedValue,
                                    //   onChanged: (value) {
                                    //     setState(() {
                                    //       selectedValue =
                                    //           value!; //<-- change this
                                    //     });
                                    //   },
                                    // ),
                                    Text(
                                      "A. The country/jurisdiction where the Account Holder is resident does not issue TINs to its residents ",
                                      style: TextController.BodyText,
                                    ),
                                  ],
                                ),
                                SizedBox(
                                  height: 10,
                                ),
                                Row(
                                  children: [
                                    // Radio<String>(
                                    //   value: "Option2",
                                    //   groupValue: selectedValue,
                                    //   onChanged: (value) {
                                    //     setState(() {
                                    //       selectedValue =
                                    //           value!; //<-- change this
                                    //     });
                                    //   },
                                    // ),
                                    Text(
                                      "B. The Account Holder is otherwise unable to obtain a TIN or equivalent number (Please explain why you are unable to obtain a TIN if you have selected this reason):",
                                      style: TextController.BodyText,
                                    ),
                                  ],
                                ),
                                // SizedBox(
                                //   height: 10,
                                // ),
                                // if (selectedValue == "Option2")
                                //   Container(
                                //     child: Row(
                                //       mainAxisAlignment:
                                //           MainAxisAlignment.spaceBetween,
                                //       children: [
                                //         Text(
                                //           S.of(context).Country1,
                                //           style: TextController.BodyText,
                                //         ),
                                //         SizedBox(
                                //           height: 10,
                                //         ),
                                //         Container(
                                //           padding: EdgeInsets.symmetric(
                                //               horizontal: 10),
                                //           width: 270,
                                //           height: 35,
                                //           alignment: Alignment.centerLeft,
                                //           decoration: BoxDecoration(
                                //               color: Colors.white,
                                //               border: Border.all(
                                //                   color:
                                //                       ColorSelect.textField)),
                                //           child: Align(
                                //             alignment: Alignment.center,
                                //             child: Padding(
                                //               padding: const EdgeInsets.only(
                                //                   bottom: 10),
                                //               child: TypeAheadField(
                                //                 textFieldConfiguration:
                                //                     TextFieldConfiguration(
                                //                         // onTap: () {
                                //                         //   setState(() {
                                //                         //     citizenshipError = false;
                                //                         //   });
                                //                         // },
                                //                         controller:
                                //                             _typeAheadController,
                                //                         style: TextController
                                //                             .BodyText,
                                //                         decoration: InputDecoration(
                                //                             enabledBorder:
                                //                                 InputBorder
                                //                                     .none,
                                //                             hintStyle:
                                //                                 TextController
                                //                                     .labelText,
                                //                             hintText: S
                                //                                 .of(context)
                                //                                 .Citizenship)),
                                //                 suggestionsCallback: (pattern) {
                                //                   // Return a filtered list of suggestions based on the search pattern.
                                //                   return citizenship
                                //                       .where((item) => item
                                //                           .toLowerCase()
                                //                           .contains(pattern
                                //                               .toLowerCase()))
                                //                       .toList();
                                //                 },
                                //                 itemBuilder:
                                //                     (context, suggestion) {
                                //                   return ListTile(
                                //                     title: Text(
                                //                       suggestion,
                                //                       style: TextController
                                //                           .BodyText,
                                //                     ),
                                //                   );
                                //                 },
                                //                 onSuggestionSelected:
                                //                     (suggestion) {
                                //                   // Update the selected item when a suggestion is selected.
                                //                   setState(() {
                                //                     _selectedItem = suggestion;
                                //                     _typeAheadController.text =
                                //                         suggestion;
                                //                   });
                                //                 },
                                //               ),
                                //             ),
                                //           ),
                                //         ),
                                //         SizedBox(
                                //           height: 10,
                                //         ),
                                //         Text(
                                //           S.of(context).Country2,
                                //           style: TextController.BodyText,
                                //         ),
                                //         SizedBox(
                                //           height: 10,
                                //         ),
                                //         Container(
                                //           padding: EdgeInsets.symmetric(
                                //               horizontal: 10),
                                //           width: 270,
                                //           height: 35,
                                //           alignment: Alignment.centerLeft,
                                //           decoration: BoxDecoration(
                                //               color: Colors.white,
                                //               border: Border.all(
                                //                   color:
                                //                       ColorSelect.textField)),
                                //           child: Align(
                                //             alignment: Alignment.center,
                                //             child: Padding(
                                //               padding: const EdgeInsets.only(
                                //                   bottom: 10),
                                //               child: TypeAheadField(
                                //                 textFieldConfiguration:
                                //                     TextFieldConfiguration(
                                //                         // onTap: () {
                                //                         //   setState(() {
                                //                         //     citizenshipError = false;
                                //                         //   });
                                //                         // },
                                //                         controller:
                                //                             _typeAheadController2,
                                //                         style: TextController
                                //                             .BodyText,
                                //                         decoration: InputDecoration(
                                //                             enabledBorder:
                                //                                 InputBorder
                                //                                     .none,
                                //                             hintStyle:
                                //                                 TextController
                                //                                     .labelText,
                                //                             hintText: S
                                //                                 .of(context)
                                //                                 .Citizenship)),
                                //                 suggestionsCallback: (pattern) {
                                //                   // Return a filtered list of suggestions based on the search pattern.
                                //                   return citizenship
                                //                       .where((item) => item
                                //                           .toLowerCase()
                                //                           .contains(pattern
                                //                               .toLowerCase()))
                                //                       .toList();
                                //                 },
                                //                 itemBuilder:
                                //                     (context, suggestion) {
                                //                   return ListTile(
                                //                     title: Text(
                                //                       suggestion,
                                //                       style: TextController
                                //                           .BodyText,
                                //                     ),
                                //                   );
                                //                 },
                                //                 onSuggestionSelected:
                                //                     (suggestion) {
                                //                   // Update the selected item when a suggestion is selected.
                                //                   setState(() {
                                //                     _selectedItem2 = suggestion;
                                //                     _typeAheadController2.text =
                                //                         suggestion;
                                //                   });
                                //                 },
                                //               ),
                                //             ),
                                //           ),
                                //         ),
                                //         SizedBox(
                                //           height: 10,
                                //         ),
                                //         Text(
                                //           S.of(context).Country3,
                                //           style: TextController.BodyText,
                                //         ),
                                //         SizedBox(
                                //           height: 10,
                                //         ),
                                //         Container(
                                //           padding: EdgeInsets.symmetric(
                                //               horizontal: 10),
                                //           width: 270,
                                //           height: 35,
                                //           alignment: Alignment.centerLeft,
                                //           decoration: BoxDecoration(
                                //               color: Colors.white,
                                //               border: Border.all(
                                //                   color:
                                //                       ColorSelect.textField)),
                                //           child: Align(
                                //             alignment: Alignment.center,
                                //             child: Padding(
                                //               padding: const EdgeInsets.only(
                                //                   bottom: 10),
                                //               child: TypeAheadField(
                                //                 textFieldConfiguration:
                                //                     TextFieldConfiguration(
                                //                         // onTap: () {
                                //                         //   setState(() {
                                //                         //     citizenshipError = false;
                                //                         //   });
                                //                         // },
                                //                         controller:
                                //                             _typeAheadController3,
                                //                         style: TextController
                                //                             .BodyText,
                                //                         decoration: InputDecoration(
                                //                             enabledBorder:
                                //                                 InputBorder
                                //                                     .none,
                                //                             hintStyle:
                                //                                 TextController
                                //                                     .labelText,
                                //                             hintText: S
                                //                                 .of(context)
                                //                                 .Citizenship)),
                                //                 suggestionsCallback: (pattern) {
                                //                   // Return a filtered list of suggestions based on the search pattern.
                                //                   return citizenship
                                //                       .where((item) => item
                                //                           .toLowerCase()
                                //                           .contains(pattern
                                //                               .toLowerCase()))
                                //                       .toList();
                                //                 },
                                //                 itemBuilder:
                                //                     (context, suggestion) {
                                //                   return ListTile(
                                //                     title: Text(
                                //                       suggestion,
                                //                       style: TextController
                                //                           .BodyText,
                                //                     ),
                                //                   );
                                //                 },
                                //                 onSuggestionSelected:
                                //                     (suggestion) {
                                //                   // Update the selected item when a suggestion is selected.
                                //                   setState(() {
                                //                     _selectedItem3 = suggestion;
                                //                     _typeAheadController3.text =
                                //                         suggestion;
                                //                   });
                                //                 },
                                //               ),
                                //             ),
                                //           ),
                                //         ),
                                //       ],
                                //     ),
                                //   ),
                                SizedBox(
                                  height: 10,
                                ),
                                Row(
                                  children: [
                                    // Radio<String>(
                                    //   value: "Option3",
                                    //   groupValue: selectedValue,
                                    //   onChanged: (value) {
                                    //     setState(() {
                                    //       selectedValue =
                                    //           value!; //<-- change this
                                    //     });
                                    //   },
                                    // ),
                                    Text(
                                      "C. No TIN is required. (Note. Only select this reason if the domestic law of the relevant jurisdiction does not require the collection of the TIN issued by such jurisdiction)",
                                      style: TextController.BodyText,
                                    ),
                                  ],
                                ),
                                if (radioError)
                                  Container(
                                    margin: EdgeInsets.all(10),
                                    child: Text(
                                      "Select Option",
                                      style: TextController.errorText,
                                    ),
                                  ),
                              ],
                            ),
                          ],
                        ),
                      ),
                    ],
                  ),
                SizedBox(
                  height: 10,
                ),
                Container(
                  width: double.infinity,
                  height: 45,
                  decoration: BoxDecoration(
                    color: ColorSelect.east_grey,
                    border: Border.all(
                      color: ColorSelect.tabBorderColor,
                    ),
                  ),
                  child: Padding(
                    padding: EdgeInsets.only(left: 50),
                    child: Align(
                        alignment: Alignment.centerLeft,
                        child: Text(
                          "Section C - USA Tax Residents",
                          style: TextController.SubHeadingText,
                        )),
                  ),
                ),
                Padding(
                  padding: const EdgeInsets.only(left: 50, top: 10),
                  child: Align(
                      alignment: Alignment.centerLeft,
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            "If you are a USA Tax Resident please provide one of the following TINs. A US TIN can be one of the following: A Social Security Number (SSN), or An Individual Taxpayer Identification Number (ITIN). Please provide you TIN in one of the lines provided below:",
                            style: TextController.BodyTextCC,
                            // maxLines: 3,
                          ),
                          Row(
                            mainAxisAlignment: MainAxisAlignment.start,
                            children: [
                              Text(
                                S.of(context).Yes,
                                style: TextController.BodyText,
                              ),
                              Radio<String>(
                                value: "Yes",
                                groupValue: sectionC,
                                onChanged: (value) {
                                  setState(() {
                                    sectionC = value!; //<-- change this
                                  });
                                },
                              ),
                              Text(
                                S.of(context).No,
                                style: TextController.BodyText,
                              ),
                              Radio<String>(
                                value: "No",
                                groupValue: sectionC,
                                onChanged: (value) {
                                  setState(() {
                                    sectionC = value!; //<-- change this
                                  });
                                },
                              ),
                            ],
                          ),
                          if (radio2error)
                            Container(
                              margin: EdgeInsets.only(top: 5),
                              child: Text(
                                "This field is required.",
                                style: TextController.errorText,
                              ),
                            ),
                        ],
                      )),
                ),
                Padding(
                  padding:
                      const EdgeInsets.symmetric(horizontal: 50, vertical: 20),
                  child: Column(
                    children: [
                      Row(
                        children: [
                          Text(
                            S.of(context).SSN,
                            style: TextController.BodyText,
                          ),
                          SizedBox(
                            width: 20,
                          ),
                          Container(
                            width: 270,
                            height: 35,
                            padding: EdgeInsets.symmetric(horizontal: 15),
                            alignment: Alignment.centerLeft,
                            decoration: BoxDecoration(
                                color: Colors.white,
                                border:
                                    Border.all(color: ColorSelect.textField)),
                            child: TextFormField(
                              controller: ssn,
                              //keyboardType: TextInputType.number,
                              validator: (value) {
                                if (sectionC == "Yes") {
                                  if (value!.isEmpty) {
                                    return "This field is required";
                                  }
                                  if (value!.length < 9) {
                                    return "Invalid";
                                  }
                                }
                                return null;
                              },
                              style: TextController.BodyText,
                              textAlignVertical: TextAlignVertical.center,
                              inputFormatters: <TextInputFormatter>[
                                FilteringTextInputFormatter.digitsOnly
                              ],
                              decoration: InputDecoration(
                                  isDense: true,
                                  hintText: "NN-NNNNNNN-",
                                  hintStyle: TextController.labelText,
                                  border: InputBorder.none,
                                  errorStyle: TextController.errorText),
                            ),
                          ),
                        ],
                      ),
                      SizedBox(
                        height: 17,
                      ),
                      Row(
                        children: [
                          Text(
                            S.of(context).ITIN,
                            style: TextController.BodyText,
                          ),
                          SizedBox(
                            width: 20,
                          ),
                          Container(
                            width: 270,
                            height: 35,
                            padding: EdgeInsets.symmetric(horizontal: 15),
                            alignment: Alignment.centerLeft,
                            decoration: BoxDecoration(
                                color: Colors.white,
                                border:
                                    Border.all(color: ColorSelect.textField)),
                            child: TextFormField(
                              controller: itin,
                              style: TextController.BodyText,
                              textAlignVertical: TextAlignVertical.center,

                              // keyboardType: TextInputType.number,
                              validator: (value) {
                                if (sectionC == "Yes") {
                                  if (value!.isEmpty) {
                                    return "This field is required";
                                  }
                                  if (value!.length < 9) {
                                    return "Invalid";
                                  }
                                }
                                return null;
                              },
                              inputFormatters: <TextInputFormatter>[
                                FilteringTextInputFormatter.digitsOnly
                              ],
                              decoration: InputDecoration(
                                  isDense: true,
                                  hintText: "NNN-NN-NNNN",
                                  hintStyle: TextController.labelText,
                                  border: InputBorder.none,
                                  errorStyle: TextController.errorText),
                            ),
                          ),
                        ],
                      ),
                      SizedBox(
                        height: 10,
                      ),
                      Center(
                        child: TextButton(
                          onPressed: () {
                            showHtmlAlert(context, htmlContent);
                          },
                          child: Text(
                            'Please click on this link to read relavant definitions',
                            style: TextController.browseText,
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
                Container(
                  width: double.infinity,
                  height: 45,
                  decoration: BoxDecoration(
                    color: ColorSelect.east_grey,
                    border: Border.all(
                      color: ColorSelect.tabBorderColor,
                    ),
                  ),
                  child: Padding(
                    padding: EdgeInsets.only(left: 50),
                    child: Align(
                        alignment: Alignment.centerLeft,
                        child: Text(
                          S.of(context).SectionDDeclarationSignn,
                          style: TextController.SubHeadingText,
                        )),
                  ),
                ),
                SizedBox(
                  height: 20,
                ),
                Padding(
                  padding: EdgeInsets.symmetric(horizontal: 50),
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      Text(
                        S.of(context).NameOfSignatoryn + "\n(In English)",
                        style: TextController.BodyText,
                      ),
                      Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Container(
                            width: 270,
                            height: 35,
                            padding:
                                EdgeInsetsDirectional.symmetric(horizontal: 15),
                            alignment: Alignment.centerLeft,
                            decoration: BoxDecoration(
                                color: Colors.white,
                                border:
                                    Border.all(color: ColorSelect.textField)),
                            child: TextFormField(
                              textAlignVertical: TextAlignVertical.center,
                              controller: name,
                              style: TextController.BodyText,
                              validator: (value) {
                                if (value!.isEmpty) {
                                  setState(() {
                                    nameError = true;
                                  });
                                  return '';
                                } else {
                                  setState(() {
                                    nameError = false;
                                  });
                                }
                                return null; // Return null if the input is valid
                              },
                              decoration: InputDecoration(
                                isDense: true,
                                hintText: S.of(context).TypeHere,
                                hintStyle: TextController.labelText,
                                border: InputBorder.none,
                                errorStyle: TextStyle(height: 0.0),
                              ),
                            ),
                          ),
                          if (nameError)
                            Container(
                                margin: EdgeInsets.only(top: 5),
                                child: Text("This field is required.",
                                    style: TextController.errorText))
                        ],
                      ),
                      Text(
                        S.of(context).CapacityOfSignatoryn,
                        style: TextController.BodyText,
                      ),
                      Flexible(
                        child: Column(
                          mainAxisAlignment: MainAxisAlignment.start,
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Container(
                              width: 270,
                              height: 35,
                              padding: EdgeInsets.symmetric(
                                horizontal: 10,
                              ),
                              alignment: Alignment.centerLeft,
                              decoration: BoxDecoration(
                                  color: Colors.white,
                                  border:
                                      Border.all(color: ColorSelect.textField)),
                              child: DropdownButton(
                                hint: Text(
                                  S.of(context).SelectHere,
                                  style: TextController.labelText,
                                ),
                                value: dropdownvalue,
                                isExpanded: true,
                                underline: Container(),
                                iconEnabledColor: ColorSelect.east_dark_blue,
                                items: items2.map((String items) {
                                  return DropdownMenuItem(
                                    value: items,
                                    child: Text(items,
                                        style: TextController.BodyText),
                                  );
                                }).toList(),
                                onChanged: (String? newValue) {
                                  setState(() {
                                    capacityError = false;
                                    dropdownvalue = newValue!;
                                  });
                                },
                              ),
                            ),
                            if (capacityError)
                              Container(
                                margin: EdgeInsets.only(top: 5),
                                child: Text(
                                  "Select any option",
                                  style: TextController.errorText,
                                ),
                              ),
                            if (dropdownvalue == "Other")
                              Container(
                                width: 270,
                                height: 35,
                                padding: EdgeInsetsDirectional.symmetric(
                                    horizontal: 15),
                                margin: EdgeInsetsDirectional.symmetric(
                                    vertical: 10),
                                alignment: Alignment.centerLeft,
                                decoration: BoxDecoration(
                                    color: Colors.white,
                                    border: Border.all(
                                        color: ColorSelect.textField)),
                                child: TextFormField(
                                  textAlignVertical: TextAlignVertical.center,
                                  controller: capacitySpecify,
                                  style: TextController.BodyText,
                                  validator: (value) {
                                    if (value!.isEmpty) {
                                      return 'This field is required.';
                                    }
                                    return null; // Return null if the input is valid
                                  },
                                  decoration: InputDecoration(
                                    isDense: true,
                                    hintText: S.of(context).TypeHere,
                                    hintStyle: TextController.labelText,
                                    border: InputBorder.none,
                                    errorStyle: TextController.inputErrorText,
                                  ),
                                ),
                              ),
                          ],
                        ),
                      ),
                      Text(
                        S.of(context).Date,
                        style: TextController.BodyText,
                      ),
                      Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Container(
                            width: 130,
                            height: 35,
                            padding:
                                EdgeInsetsDirectional.symmetric(horizontal: 5),
                            alignment: Alignment.centerLeft,
                            decoration: BoxDecoration(
                                color: Colors.white,
                                border:
                                    Border.all(color: ColorSelect.textField)),
                            child: TextFormField(
                              controller: date,
                              style: TextController.BodyHeadingText,
                              textAlignVertical: TextAlignVertical.center,
                              decoration: InputDecoration(
                                isDense: true,
                                suffixIcon: Icon(
                                  Icons.calendar_month_outlined,
                                  size: 15,
                                ),
                                hintText: S.of(context).DateFormat,
                                hintStyle: TextController.labelTextDate,
                                border: InputBorder.none,
                                errorStyle: TextStyle(height: 0.0),
                              ),
                              validator: (value) {
                                if (value!.isEmpty) {
                                  setState(() {
                                    dateError = true;
                                  });
                                  return '';
                                } else {
                                  setState(() {
                                    dateError = false;
                                  });
                                }
                                return null; // Return null if the input is valid
                              },
                              //readOnly: true,
                              onTap: () async {
                                DateTime? datepicked = await showDatePicker(
                                    context: context,
                                    initialDate: DateTime.now(),
                                    firstDate: DateTime.now(),
                                    lastDate: DateTime.now());
                                if (datepicked != null) {
                                  print(
                                      datepicked); //get the picked date in the format => 2022-07-04 00:00:00.000
                                  String formattedDate =
                                      DateFormat('dd-MM-yyyy')
                                          .format(datepicked!);
                                  HijriCalendar picked =
                                      HijriCalendar.fromDate(datepicked);
                                  WidgetsBinding.instance.addPostFrameCallback(
                                      (_) => setState((date.text =
                                          formattedDate) as VoidCallback));
                                  WidgetsBinding.instance.addPostFrameCallback(
                                      (_) => setState((dateHijri.text =
                                          picked.toString()) as VoidCallback));
                                  // format date in required form here we use yyyy-MM-dd that means time is remove
                                } else {
                                  print("Date is not selected");
                                }
                              },
                            ),
                          ),
                          if (dateError)
                            Container(
                                margin: EdgeInsets.only(top: 5),
                                child: Text(
                                  "This field is required.",
                                  style: TextController.errorText,
                                ))
                        ],
                      ),
                      Text(
                        S.of(context).DateHijri,
                        style: TextController.BodyText,
                      ),
                      Container(
                          width: 130,
                          height: 35,
                          padding: EdgeInsets.symmetric(horizontal: 5),
                          alignment: Alignment.centerLeft,
                          decoration: BoxDecoration(
                              color: Colors.white,
                              border: Border.all(color: ColorSelect.textField)),
                          child: TextFormField(
                            controller: dateHijri,
                            textAlignVertical: TextAlignVertical.center,
                            style: TextController.BodyHeadingText,
                            decoration: InputDecoration(
                              isDense: true,
                              suffixIcon: Icon(
                                Icons.calendar_month_outlined,
                                size: 15,
                              ),
                              hintText: S.of(context).DateFormat,
                              hintStyle: TextController.labelTextDate,
                              border: InputBorder.none,
                              errorStyle: TextController.inputErrorText,
                            ),
                            readOnly: true,
                            // onTap: () async {
                            //   final HijriCalendar? picked =
                            //       await showHijriDatePicker(
                            //     context: context,
                            //     initialDate: selectedDate,
                            //     lastDate: new HijriCalendar()
                            //       ..hYear = 1445
                            //       ..hMonth = 9
                            //       ..hDay = 25,
                            //     firstDate: new HijriCalendar()
                            //       ..hYear = 1438
                            //       ..hMonth = 12
                            //       ..hDay = 25,
                            //     initialDatePickerMode: DatePickerMode.day,
                            //   );
                            //   if (picked != null) {
                            //     //print(picked);
                            //     WidgetsBinding.instance.addPostFrameCallback(
                            //         (_) => setState((dateHijri.text =
                            //             picked.toString()) as VoidCallback));
                            //   }
                            // },
                          )),
                    ],
                  ),
                ),
                SizedBox(
                  height: 15,
                ),
                Padding(
                  padding: EdgeInsets.symmetric(horizontal: 50),
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.start,
                    children: [
                      Text(
                        S.of(context).NameOfSignatoryn + "\n(In Arabic)",
                        style: TextController.BodyText,
                      ),
                      SizedBox(
                        width: 20,
                      ),
                      Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Container(
                            width: 270,
                            height: 35,
                            padding: EdgeInsets.symmetric(horizontal: 15),
                            alignment: Alignment.centerLeft,
                            decoration: BoxDecoration(
                                color: Colors.white,
                                border:
                                    Border.all(color: ColorSelect.textField)),
                            child: TextFormField(
                              controller: nameAr,
                              textAlignVertical: TextAlignVertical.center,
                              style: TextController.BodyText,
                              validator: (value) {
                                if (value!.isEmpty) {
                                  setState(() {
                                    nameArError = true;
                                  });
                                  return '';
                                } else {
                                  setState(() {
                                    nameArError = false;
                                  });
                                }
                                return null; // Return null if the input is valid
                              },
                              inputFormatters: [
                                FilteringTextInputFormatter.allow(
                                    RegExp(r'[\u0600-\u06FF\s]')),
                              ],
                              decoration: InputDecoration(
                                isDense: true,
                                hintText: S.of(context).TypeHere,
                                hintStyle: TextController.labelText,
                                border: InputBorder.none,
                                errorStyle: TextStyle(height: 0.0),
                              ),
                            ),
                          ),
                          if (nameArError)
                            Container(
                              margin: EdgeInsets.only(top: 5),
                              child: Text(
                                "This field is required.",
                                style: TextController.errorText,
                              ),
                            )
                        ],
                      ),
                    ],
                  ),
                ),
                SizedBox(
                  height: 15,
                ),
                Column(
                  crossAxisAlignment: CrossAxisAlignment.center,
                  children: [
                    Row(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        Checkbox(
                            value: isChecked,
                            onChanged: (val) {
                              setState(() {
                                declareError = false;
                                isChecked = val;
                              });
                            }),
                        GestureDetector(
                          onTap: () {
                            showDialog<void>(
                              context: context,
                              builder: (BuildContext context) {
                                return AlertDialog(
                                  title: Text(
                                    S.of(context).Declaration,
                                    style: TextController.BodyHeadingText,
                                  ),
                                  content: Text(
                                    S.of(context).FatcaDeclarationText,
                                    style: TextController.BodyText,
                                  ),
                                  actions: <Widget>[
                                    TextButton(
                                      style: TextButton.styleFrom(
                                        textStyle: Theme.of(context)
                                            .textTheme
                                            .labelLarge,
                                      ),
                                      child: Text(S.of(context).OK),
                                      onPressed: () {
                                        Navigator.of(context).pop();
                                      },
                                    ),
                                  ],
                                );
                              },
                            );
                          },
                          child: Text(
                            S.of(context).Declaration,
                            style: TextController.termsText,
                          ),
                        )
                      ],
                    ),
                    if (declareError)
                      Container(
                        margin: EdgeInsets.only(top: 5),
                        child: Text(
                          "Please Accept Declaration",
                          style: TextController.errorText,
                        ),
                      )
                  ],
                ),
                SizedBox(
                  height: 50,
                ),
                Padding(
                  padding: const EdgeInsets.only(right: 50),
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.end,
                    children: [
                      Container(
                        height: 35,
                        width: 140,
                        decoration: BoxDecoration(
                            color: Colors.white,
                            border:
                                Border.all(color: ColorSelect.tabBorderColor)),
                        child: TextButton(
                          onPressed: () {
                            tabController?.animateTo(10);
                          }, // Switch tabs
                          child: Text(
                            S.of(context).Back,
                            style: TextController.SideMenuText,
                          ),
                        ),
                      ),
                      SizedBox(
                        width: 20,
                      ),
                      Container(
                        height: 35,
                        width: 140,
                        decoration: BoxDecoration(
                            color: ColorSelect.east_blue,
                            border:
                                Border.all(color: ColorSelect.tabBorderColor)),
                        child: ElevatedButton(
                          style: ButtonStyle(
                            backgroundColor:
                                MaterialStatePropertyAll(ColorSelect.east_blue),
                          ),
                          onPressed: () {
                            if (_formKey.currentState != null) {
                              setState(() {
                                declareError = isChecked == false;
                                capacityError = dropdownvalue == null;
                                radio1error = sectionAque == "";
                                radio2error = sectionC == "";

                                if (countryJr1.text == "" &&
                                    tin1.text == "" &&
                                    notin1.text == "" &&
                                    sectionAque == "Yes") {
                                  tableError = true;
                                } else {
                                  tableError = false;
                                }

                                if (tin1.text != "" &&
                                    sectionAque == "Yes" &&
                                    ifnotin1 == "") {
                                  ifnotin1Error = true;
                                } else {
                                  ifnotin1Error = false;
                                }
                                if (tin2.text != "" &&
                                    sectionAque == "Yes" &&
                                    ifnotin2 == "") {
                                  ifnotin2Error = true;
                                } else {
                                  ifnotin2Error = false;
                                }
                                if (tin3.text != "" &&
                                    sectionAque == "Yes" &&
                                    ifnotin3 == "") {
                                  ifnotin3Error = true;
                                } else {
                                  ifnotin3Error = false;
                                }

                                // --------------------------------------- //
                                // if (tin1.text == "" ||
                                //     tin2.text == "" ||
                                //     tin3.text == "") {
                                //   radioError = true;
                                // } else {
                                //   radioError = false;
                                // }
                              });

                              if (_formKey.currentState!.validate() &&
                                  !declareError &&
                                  !tableError &&
                                  !capacityError &&
                                  !ifnotin1Error &&
                                  !ifnotin2Error &&
                                  !ifnotin3Error) {
                                _formKey.currentState?.save();
                                if (GlobalIndividual.individualdraftprogress[
                                        "FatcaAndCrsIndividual"] ==
                                    true) {
                                  putdata(GlobalIndividual.individualclientid);
                                } else {
                                  if (GlobalIndividual.individualclientid !=
                                      0) {
                                    senddata();
                                  } else {
                                    Fluttertoast.showToast(
                                        msg: "Please fill personal info first",
                                        toastLength: Toast.LENGTH_SHORT,
                                        gravity: ToastGravity.CENTER,
                                        timeInSecForIosWeb: 3,
                                        backgroundColor: Colors.red,
                                        textColor: Colors.white,
                                        fontSize: 16.0);
                                  }
                                }
                              }
                            } else {
                              // Handle case where _formKey.currentState is null
                            }

                            // if (dropdownvalue != null) {
                            //   if (isChecked == false) {
                            //     if (_formKey.currentState!.validate()) {
                            //       fatca();
                            //     }
                            //   } else {
                            //     setState(() {
                            //       declareError = true;
                            //     });
                            //   }
                            // } else {
                            //   setState(() {
                            //     capacityError = true;
                            //   });
                            // }
                            // if (isChecked == false) {
                            //   Fluttertoast.showToast(
                            //       msg: "Please Accept Declaration",
                            //       toastLength: Toast.LENGTH_SHORT,
                            //       gravity: ToastGravity.CENTER,
                            //       timeInSecForIosWeb: 1,
                            //       backgroundColor: Colors.red,
                            //       textColor: Colors.white,
                            //       fontSize: 16.0);
                            // } else {
                            // fatca();
                            // tabController?.animateTo(12);
                            // }
                          }, // Switch tabs
                          child: Text(
                            btn,
                            style: TextController.btnText,
                          ),
                        ),
                      ),
                    ],
                  ),
                )
              ],
            ),
          ),
        ),
      ),
    );
  }
}
